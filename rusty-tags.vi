!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
AC	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    AC { ac: AhoCorasick<u32>, lits: Vec<Literal> },$/;"	e	enum:Matcher
AC	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    AC(&'a [Literal]),$/;"	e	enum:LiteralIter
Adapter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^        impl<'ser, W, F> Write for Adapter<'ser, W, F>$/;"	c	function:collect_str
Adapter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^        struct Adapter<'ser, W: 'ser, F: 'ser> {$/;"	s	function:collect_str
AhoCorasick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    AhoCorasick,$/;"	e	enum:MatchLiteralType
Align	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl Default for Align {$/;"	c
Align	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub enum Align {$/;"	g
AnchoredEnd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    AnchoredEnd,$/;"	e	enum:MatchLiteralType
AnchoredStart	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    AnchoredStart,$/;"	e	enum:MatchLiteralType
Array	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    Array(Vec<Value>),$/;"	e	enum:Value
AsCast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^pub trait AsCast: AsPrimitive {$/;"	i
AsPrimitive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^pub trait AsPrimitive: Sized + Copy + PartialOrd {$/;"	i
AsciiControl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    AsciiControl(u8),$/;"	e	enum:CharEscape
Auto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Auto,$/;"	e	enum:MatchNfaType
Backspace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Backspace,$/;"	e	enum:CharEscape
Backtrack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Backtrack,$/;"	e	enum:MatchNfaType
Bigint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bignum.rs	/^impl Default for Bigint {$/;"	c
Bigint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bignum.rs	/^impl Math for Bigint {$/;"	c
Bigint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bignum.rs	/^pub(crate) struct Bigint {$/;"	s
Bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^type Bits = u32;$/;"	t
Bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    Bool(bool),$/;"	e	enum:Value
Border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Border {$/;"	c
Border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Default for Border {$/;"	c
Border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct Border {$/;"	s
BorderBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl BorderBuilder {$/;"	c
BorderBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct BorderBuilder(Border);$/;"	s
Borrowed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    Borrowed(&'b T),$/;"	e	enum:Reference
BorrowedCowStrDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> BorrowedCowStrDeserializer<'de> {$/;"	c
BorrowedCowStrDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> de::Deserializer<'de> for BorrowedCowStrDeserializer<'de> {$/;"	c
BorrowedCowStrDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> de::EnumAccess<'de> for BorrowedCowStrDeserializer<'de> {$/;"	c
BorrowedCowStrDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct BorrowedCowStrDeserializer<'de> {$/;"	s
BorrowedRawDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> MapAccess<'de> for BorrowedRawDeserializer<'de> {$/;"	c
BorrowedRawDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^pub struct BorrowedRawDeserializer<'de> {$/;"	s
Bottom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    Bottom,$/;"	e	enum:Align
Bounded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^impl<'a, 'm, 'r, 's, I: Input> Bounded<'a, 'm, 'r, 's, I> {$/;"	c
Bounded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^pub struct Bounded<'a, 'm, 'r, 's, I> {$/;"	s
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl Clone for Box<RawValue> {$/;"	c
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl Default for Box<RawValue> {$/;"	c
Box	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> Deserialize<'de> for Box<RawValue> {$/;"	c
BoxedFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> DeserializeSeed<'de> for BoxedFromString {$/;"	c
BoxedFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> Visitor<'de> for BoxedFromString {$/;"	c
BoxedFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^pub struct BoxedFromString;$/;"	s
BoxedVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^        impl<'de> Visitor<'de> for BoxedVisitor {$/;"	c	method:Box::deserialize
BoxedVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^        struct BoxedVisitor;$/;"	s	method:Box::deserialize
Buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/buffers.rs	/^    type Buffers;$/;"	t	interface:Buffers
Buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/buffers.rs	/^pub(crate) trait Buffers {$/;"	i
Buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    type Buffers = Vec<Buffer>;$/;"	t	implementation:CellStruct
Buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    type Buffers = Vec<Vec<Buffer>>;$/;"	t	implementation:RowStruct
Byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl Byte {$/;"	c
Byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct Byte(u16);$/;"	s
ByteClassSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl ByteClassSet {$/;"	c
ByteClassSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl fmt::Debug for ByteClassSet {$/;"	c
ByteClassSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^struct ByteClassSet([bool; 256]);$/;"	s
ByteInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'t> ByteInput<'t> {$/;"	c
ByteInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'t> Input for ByteInput<'t> {$/;"	c
ByteInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'t> ops::Deref for ByteInput<'t> {$/;"	c
ByteInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^pub struct ByteInput<'t> {$/;"	s
Bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Bytes { start: u8, end: u8 },$/;"	e	enum:InstHole
Bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Bytes(&'a [u8]),$/;"	e	enum:LiteralIter
Bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Bytes(SingleByteSet),$/;"	e	enum:Matcher
Bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    Bytes(InstBytes),$/;"	e	enum:Inst
COUNTER	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^static COUNTER: AtomicUsize = AtomicUsize::new(1);$/;"	v
COUNTER	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^static COUNTER: AtomicUsize = AtomicUsize::new(0);$/;"	v
Cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^impl Cache {$/;"	c
Cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^pub struct Cache {$/;"	s
Cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl Cache {$/;"	c
Cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^pub struct Cache {$/;"	s
Cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^impl Cache {$/;"	c
Cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^pub struct Cache {$/;"	s
CacheInner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl CacheInner {$/;"	c
CacheInner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct CacheInner {$/;"	s
Capture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    Capture { slot: usize, pos: Slot },$/;"	e	enum:FollowEpsilon
CaptureLocations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl CaptureLocations {$/;"	c
CaptureLocations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct CaptureLocations(re_trait::Locations);$/;"	s
CaptureLocations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl CaptureLocations {$/;"	c
CaptureLocations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct CaptureLocations(re_trait::Locations);$/;"	s
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> FusedIterator for CaptureMatches<'r, 't> {}$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> Iterator for CaptureMatches<'r, 't> {$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct CaptureMatches<'r, 't>($/;"	s
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'t, R> CaptureMatches<'t, R>$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'t, R> FusedIterator for CaptureMatches<'t, R>$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'t, R> Iterator for CaptureMatches<'t, R>$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^pub struct CaptureMatches<'t, R>(Matches<'t, R>)$/;"	s
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> FusedIterator for CaptureMatches<'r, 't> {}$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> Iterator for CaptureMatches<'r, 't> {$/;"	c
CaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct CaptureMatches<'r, 't>($/;"	s
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r> ExactSizeIterator for CaptureNames<'r> {}$/;"	c
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r> FusedIterator for CaptureNames<'r> {}$/;"	c
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r> Iterator for CaptureNames<'r> {$/;"	c
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct CaptureNames<'r>(::std::slice::Iter<'r, Option<String>>);$/;"	s
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r> ExactSizeIterator for CaptureNames<'r> {}$/;"	c
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r> FusedIterator for CaptureNames<'r> {}$/;"	c
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r> Iterator for CaptureNames<'r> {$/;"	c
CaptureNames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct CaptureNames<'r>(::std::slice::Iter<'r, Option<String>>);$/;"	s
CaptureRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^struct CaptureRef<'a> {$/;"	s
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t, 'i> Index<&'i str> for Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t> Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t> Index<usize> for Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t> fmt::Debug for Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct Captures<'t> {$/;"	s
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t, 'i> Index<&'i str> for Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> Index<usize> for Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> fmt::Debug for Captures<'t> {$/;"	c
Captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct Captures<'t> {$/;"	s
CapturesDebug	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'c, 't> fmt::Debug for CapturesDebug<'c, 't> {$/;"	c
CapturesDebug	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^struct CapturesDebug<'c, 't>(&'c Captures<'t>);$/;"	s
CapturesDebug	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'c, 't> fmt::Debug for CapturesDebug<'c, 't> {$/;"	c
CapturesDebug	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^struct CapturesDebug<'c, 't>(&'c Captures<'t>);$/;"	s
CarriageReturn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    CarriageReturn,$/;"	e	enum:CharEscape
Category	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^pub enum Category {$/;"	g
Cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub trait Cell {$/;"	i
CellFormat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^struct CellFormat {$/;"	s
CellStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl Buffers for CellStruct {$/;"	c
CellStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl Cell for CellStruct {$/;"	c
CellStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl CellStruct {$/;"	c
CellStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl Style for CellStruct {$/;"	c
CellStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub struct CellStruct {$/;"	s
Center	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    Center,$/;"	e	enum:Align
Center	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    Center,$/;"	e	enum:Justify
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Char { c: char },$/;"	e	enum:InstHole
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl Char {$/;"	c
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl From<Option<char>> for Char {$/;"	c
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl From<char> for Char {$/;"	c
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl PartialEq<char> for Char {$/;"	c
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl PartialOrd<char> for Char {$/;"	c
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl fmt::Debug for Char {$/;"	c
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^pub struct Char(u32);$/;"	s
Char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    Char(InstChar),$/;"	e	enum:Inst
CharEscape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl CharEscape {$/;"	c
CharEscape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub enum CharEscape {$/;"	g
CharInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'t> CharInput<'t> {$/;"	c
CharInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'t> Input for CharInput<'t> {$/;"	c
CharInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'t> ops::Deref for CharInput<'t> {$/;"	c
CharInput	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^pub struct CharInput<'t>(&'t [u8]);$/;"	s
Client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^impl Client {$/;"	c
Client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^impl Clone for Client {$/;"	c
Client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^impl Default for Client {$/;"	c
Client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^impl fmt::Debug for Client {$/;"	c
Client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^pub struct Client {$/;"	s
CompileClass	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl<'a, 'b> CompileClass<'a, 'b> {$/;"	c
CompileClass	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^struct CompileClass<'a, 'b> {$/;"	s
Compiled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Compiled(Inst),$/;"	e	enum:MaybeInst
CompiledTooBig	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^    CompiledTooBig(usize),$/;"	e	enum:Error
Compiler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl Compiler {$/;"	c
Compiler	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^pub struct Compiler {$/;"	s
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeMap for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeSeq for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeStruct for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeStructVariant for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeTuple for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeTupleStruct for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::SerializeTupleVariant for Compound<'a, W, F>$/;"	c
Compound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub enum Compound<'a, W: 'a, F: 'a> {$/;"	g
ControlCharacterWhileParsingString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    ControlCharacterWhileParsingString,$/;"	e	enum:ErrorCode
Copied	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    Copied(&'c T),$/;"	e	enum:Reference
Cow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'a> Replacer for &'a Cow<'a, [u8]> {$/;"	c
Cow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'a> Replacer for Cow<'a, [u8]> {$/;"	c
Cow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'a> Replacer for &'a Cow<'a, str> {$/;"	c
Cow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'a> Replacer for Cow<'a, str> {$/;"	c
CreateFn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^type CreateFn<T> =$/;"	t
Data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    Data,$/;"	e	enum:Category
DecodeError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl fmt::Debug for DecodeError {$/;"	c
DecodeError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl fmt::Display for DecodeError {$/;"	c
DecodeError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl std::error::Error for DecodeError {}$/;"	c
DecodeError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^pub struct DecodeError {$/;"	s
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'a> Deserializer<read::SliceRead<'a>> {$/;"	c
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'a> Deserializer<read::StrRead<'a>> {$/;"	c
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de>> de::Deserializer<'de> for &'a mut Deserializer<R> {$/;"	c
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, R: Read<'de>> Deserializer<R> {$/;"	c
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, R> Deserializer<R>$/;"	c
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<R> Deserializer<read::IoRead<R>>$/;"	c
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^pub struct Deserializer<R> {$/;"	s
Deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Deserializer = Self;$/;"	t	implementation:Value
Dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Dfa,$/;"	e	enum:MatchType
DfaAnchoredReverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    DfaAnchoredReverse,$/;"	e	enum:MatchType
DfaMany	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    DfaMany,$/;"	e	enum:MatchType
DfaSuffix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    DfaSuffix,$/;"	e	enum:MatchType
Dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/buffers.rs	/^    type Dimension;$/;"	t	interface:Buffers
Dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    type Dimension = Dimension;$/;"	t	implementation:CellStruct
Dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub(crate) struct Dimension {$/;"	s
Dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    type Dimension = Dimension;$/;"	t	implementation:RowStruct
Dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^pub(crate) struct Dimension {$/;"	s
Dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub(crate) struct Dimension {$/;"	s
ESCAPE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^static ESCAPE: [bool; 256] = {$/;"	v
ESCAPE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^static ESCAPE: [u8; 256] = [$/;"	v	method:Formatter::write_char_escape
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Empty,$/;"	e	enum:LiteralIter
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Empty,$/;"	e	enum:Matcher
Empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Empty,$/;"	e	enum:State
EmptyFlags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct EmptyFlags {$/;"	s
EmptyLook	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    EmptyLook { look: EmptyLook },$/;"	e	enum:InstHole
EmptyLook	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    EmptyLook(InstEmptyLook),$/;"	e	enum:Inst
EmptyLook	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub enum EmptyLook {$/;"	g
EndLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    EndLine,$/;"	e	enum:EmptyLook
EndText	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    EndText,$/;"	e	enum:EmptyLook
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a> Entry<'a> {$/;"	c
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub enum Entry<'a> {$/;"	g
EnumDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> EnumAccess<'de> for EnumDeserializer {$/;"	c
EnumDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct EnumDeserializer {$/;"	s
EnumRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> EnumAccess<'de> for EnumRefDeserializer<'de> {$/;"	c
EnumRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct EnumRefDeserializer<'de> {$/;"	s
Eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    Eof,$/;"	e	enum:Category
EofWhileParsingList	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    EofWhileParsingList,$/;"	e	enum:ErrorCode
EofWhileParsingObject	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    EofWhileParsingObject,$/;"	e	enum:ErrorCode
EofWhileParsingString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    EofWhileParsingString,$/;"	e	enum:ErrorCode
EofWhileParsingValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    EofWhileParsingValue,$/;"	e	enum:ErrorCode
Err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Err = Error;$/;"	t	implementation:Regex
Err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Err = Error;$/;"	t	implementation:Regex
Err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Err = Error;$/;"	t	implementation:Number
Err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Err = Error;$/;"	t	implementation:Value
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/csv.rs	/^    type Error = Error;$/;"	t	implementation:TableStruct
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^impl ::std::error::Error for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^impl fmt::Debug for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^pub enum Error {$/;"	g
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Error = Error;$/;"	t
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Error = Error;$/;"	t	implementation:Deserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Error = Error;$/;"	t	implementation:MapAccess
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Error = Error;$/;"	t	implementation:SeqAccess
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Error = Error;$/;"	t	implementation:UnitVariantAccess
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Error = Error;$/;"	t	implementation:VariantAccess
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl Debug for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl Display for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl From<Error> for io::Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl de::Error for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl serde::de::StdError for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^pub struct Error {$/;"	s
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^impl Display for Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^impl Error {$/;"	c
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^pub struct Error;$/;"	s
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    type Error = Error;$/;"	t	implementation:Number
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    type Error = Error;$/;"	t	implementation:NumberDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    type Error = Error;$/;"	t	implementation:NumberFieldDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    type Error = Error;$/;"	t	implementation:BorrowedRawDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    type Error = Error;$/;"	t	implementation:OwnedRawDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    type Error = Error;$/;"	t	implementation:RawKeyDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type Error = Error;$/;"	t
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type Error = Error;$/;"	t	implementation:NumberStrEmitter
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type Error = Error;$/;"	t	implementation:RawValueStrEmitter
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:BorrowedCowStrDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:EnumDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:EnumRefDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:MapDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:MapKeyDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:MapRefDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:SeqDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:SeqRefDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:UnitOnly
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:Value
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:VariantDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Error = Error;$/;"	t	implementation:VariantRefDeserializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:MapKeySerializer
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:NumberValueEmitter
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:RawValueEmitter
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeMap
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeStructVariant
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeTupleVariant
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:SerializeVec
Error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Error = Error;$/;"	t	implementation:Serializer
ErrorCode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl Display for ErrorCode {$/;"	c
ErrorCode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^pub(crate) enum ErrorCode {$/;"	g
ErrorImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^impl Display for ErrorImpl {$/;"	c
ErrorImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^struct ErrorImpl {$/;"	s
ErrorKind	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^pub enum ErrorKind {$/;"	g
Exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl Clone for Exec {$/;"	c
Exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl Exec {$/;"	c
Exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^pub struct Exec {$/;"	s
ExecBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl ExecBuilder {$/;"	c
ExecBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^pub struct ExecBuilder {$/;"	s
ExecNoSync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl<'c> ExecNoSync<'c> {$/;"	c
ExecNoSync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl<'c> RegularExpression for ExecNoSync<'c> {$/;"	c
ExecNoSync	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^pub struct ExecNoSync<'c> {$/;"	s
ExecNoSyncStr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl<'c> ExecNoSyncStr<'c> {$/;"	c
ExecNoSyncStr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl<'c> RegularExpression for ExecNoSyncStr<'c> {$/;"	c
ExecNoSyncStr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^pub struct ExecNoSyncStr<'c>(ExecNoSync<'c>);$/;"	s
ExecReadOnly	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl ExecReadOnly {$/;"	c
ExecReadOnly	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^struct ExecReadOnly {$/;"	s
ExpectedColon	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    ExpectedColon,$/;"	e	enum:ErrorCode
ExpectedListCommaOrEnd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    ExpectedListCommaOrEnd,$/;"	e	enum:ErrorCode
ExpectedObjectCommaOrEnd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    ExpectedObjectCommaOrEnd,$/;"	e	enum:ErrorCode
ExpectedSomeIdent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    ExpectedSomeIdent,$/;"	e	enum:ErrorCode
ExpectedSomeValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    ExpectedSomeValue,$/;"	e	enum:ErrorCode
ExtendedFloat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^impl ModeratePathCache for ExtendedFloat {$/;"	c
ExtendedFloat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^impl ExtendedFloat {$/;"	c
ExtendedFloat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^pub(crate) struct ExtendedFloat {$/;"	s
ExtendedFloatArray	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^impl ExtendedFloatArray {$/;"	c
ExtendedFloatArray	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^pub(crate) struct ExtendedFloatArray {$/;"	s
F	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<F, T> Replacer for F$/;"	c
F	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<F, T> Replacer for F$/;"	c
F	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^impl<F> Middleware for F$/;"	c
F64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    F64(f64),$/;"	e	enum:ParserNumber
FieldVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^        impl<'de> de::Visitor<'de> for FieldVisitor {$/;"	c	method:NumberKey::deserialize
FieldVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^        struct FieldVisitor;$/;"	s	method:NumberKey::deserialize
FieldVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^        impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:RawKey::deserialize
FieldVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^        struct FieldVisitor;$/;"	s	method:RawKey::deserialize
First	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    First,$/;"	e	enum:State
Float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^pub trait Float: Number {$/;"	i
Float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    Float(f64),$/;"	e	enum:N
FloatErrors	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^pub(crate) trait FloatErrors {$/;"	i
FollowEpsilon	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^enum FollowEpsilon {$/;"	g
FormFeed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    FormFeed,$/;"	e	enum:CharEscape
Formatter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub trait Formatter {$/;"	i
Fsm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl<'a> Fsm<'a> {$/;"	c
Fsm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^pub struct Fsm<'a> {$/;"	s
Fsm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^impl<'r, I: Input> Fsm<'r, I> {$/;"	c
Fsm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^pub struct Fsm<'r, I> {$/;"	s
Fused	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub trait Fused: private::Sealed {}$/;"	i
HEX	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^static HEX: [u8; 256] = {$/;"	v
Hi64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^trait Hi64<T>: AsRef<[T]> {$/;"	i
Hole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^enum Hole {$/;"	g
Hole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl Hole {$/;"	c
HorizontalLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Default for HorizontalLine {$/;"	c
HorizontalLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl HorizontalLine {$/;"	c
HorizontalLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct HorizontalLine {$/;"	s
I64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    I64(i64),$/;"	e	enum:ParserNumber
IP	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    IP(InstPtr),$/;"	e	enum:FollowEpsilon
Index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^pub trait Index: private::Sealed {$/;"	i
Input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^pub trait Input: fmt::Debug {$/;"	i
InputAt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl InputAt {$/;"	c
InputAt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^pub struct InputAt {$/;"	s
Inst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    Inst { ip: InstPtr, at: InputAt },$/;"	e	enum:Job
Inst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl Inst {$/;"	c
Inst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub enum Inst {$/;"	g
InstBytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl InstBytes {$/;"	c
InstBytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct InstBytes {$/;"	s
InstChar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct InstChar {$/;"	s
InstEmptyLook	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct InstEmptyLook {$/;"	s
InstHole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^enum InstHole {$/;"	g
InstHole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl InstHole {$/;"	c
InstPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^type InstPtr = u32;$/;"	t
InstPtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub type InstPtr = usize;$/;"	t
InstPtrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl<'a> Iterator for InstPtrs<'a> {$/;"	c
InstPtrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct InstPtrs<'a> {$/;"	s
InstRanges	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl InstRanges {$/;"	c
InstRanges	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct InstRanges {$/;"	s
InstSave	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct InstSave {$/;"	s
InstSplit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct InstSplit {$/;"	s
Integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^pub trait Integer: Number + ops::BitAnd<Output = Self> + ops::Shr<i32, Output = Self> {$/;"	i
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    type IntoIter = slice::Iter<'a, Inst>;$/;"	t	implementation:Program
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    type IntoIter = slice::Iter<'a, usize>;$/;"	t	implementation:SparseSet
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type IntoIter = IntoIter;$/;"	t	implementation:Map
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type IntoIter = Iter<'a>;$/;"	t	implementation:Map
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type IntoIter = IterMut<'a>;$/;"	t	implementation:Map
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct IntoIter {$/;"	s
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type IntoIter = headers::IntoIter;$/;"	t	implementation:Request
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type IntoIter = headers::Iter<'a>;$/;"	t	implementation:Request
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type IntoIter = headers::IterMut<'a>;$/;"	t	implementation:Request
IntoIterImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type IntoIterImpl = btree_map::IntoIter<String, Value>;$/;"	t
IntoIterImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type IntoIterImpl = indexmap::map::IntoIter<String, Value>;$/;"	t
InvalidEscape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    InvalidEscape,$/;"	e	enum:ErrorCode
InvalidNumber	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    InvalidNumber,$/;"	e	enum:ErrorCode
InvalidUnicodeCodePoint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    InvalidUnicodeCodePoint,$/;"	e	enum:ErrorCode
Io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    Io(io::Error),$/;"	e	enum:ErrorCode
Io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    Io,$/;"	e	enum:Category
IoRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'de, R> Read<'de> for IoRead<R>$/;"	c
IoRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<R> IoRead<R>$/;"	c
IoRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<R> private::Sealed for IoRead<R> where R: io::Read {}$/;"	c
IoRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub struct IoRead<R>$/;"	s
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    type Item = usize;$/;"	t	implementation:InstPtrs
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    type Item = &'a [u8];$/;"	t	implementation:LiteralIter
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    type Item = &'a Inst;$/;"	t	implementation:Program
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Item = &'t [u8];$/;"	t	implementation:Split
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Item = &'t [u8];$/;"	t	implementation:SplitN
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Item = Captures<'t>;$/;"	t	implementation:CaptureMatches
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Item = Match<'t>;$/;"	t	implementation:Matches
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Item = Option<&'r str>;$/;"	t	implementation:CaptureNames
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Item = Option<Match<'t>>;$/;"	t	implementation:SubCaptureMatches
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    type Item = (usize, usize);$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    type Item = Locations;$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    type Item = Option<(usize, usize)>;$/;"	t	implementation:SubCapturesPosIter
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Item = &'t str;$/;"	t	implementation:Split
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Item = &'t str;$/;"	t	implementation:SplitN
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Item = Captures<'t>;$/;"	t	implementation:CaptureMatches
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Item = Match<'t>;$/;"	t	implementation:Matches
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Item = Option<&'r str>;$/;"	t	implementation:CaptureNames
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Item = Option<Match<'t>>;$/;"	t	implementation:SubCaptureMatches
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    type Item = &'a usize;$/;"	t	implementation:SparseSet
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Item = Result<T>;$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    type Item = io::Result<u8>;$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type Item = (&'a String, &'a Value);$/;"	t	implementation:Map
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type Item = (&'a String, &'a mut Value);$/;"	t	implementation:Map
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type Item = (String, Value);$/;"	t	implementation:Map
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type Item = (&'a HeaderName, &'a HeaderValues);$/;"	t	implementation:Request
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type Item = (&'a HeaderName, &'a mut HeaderValues);$/;"	t	implementation:Request
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type Item = (HeaderName, HeaderValues);$/;"	t	implementation:Request
Iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct Iter<'a> {$/;"	s
IterImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type IterImpl<'a> = btree_map::Iter<'a, String, Value>;$/;"	t
IterImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type IterImpl<'a> = indexmap::map::Iter<'a, String, Value>;$/;"	t
IterMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct IterMut<'a> {$/;"	s
IterMutImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type IterMutImpl<'a> = btree_map::IterMut<'a, String, Value>;$/;"	t
IterMutImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type IterMutImpl<'a> = indexmap::map::IterMut<'a, String, Value>;$/;"	t
Job	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^enum Job {$/;"	g
Justify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl Default for Justify {$/;"	c
Justify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub enum Justify {$/;"	g
Key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^            impl<'a, Q: ?Sized> RangeBounds<Q> for Key<'a, Q> {$/;"	c	method:Map::remove_entry
Key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^            struct Key<'a, Q: ?Sized>(&'a Q);$/;"	s	method:Map::remove_entry
KeyClass	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^enum KeyClass {$/;"	g
KeyClassifier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> DeserializeSeed<'de> for KeyClassifier {$/;"	c
KeyClassifier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> Visitor<'de> for KeyClassifier {$/;"	c
KeyClassifier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct KeyClassifier;$/;"	s
KeyMustBeAString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    KeyMustBeAString,$/;"	e	enum:ErrorCode
Keys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct Keys<'a> {$/;"	s
KeysImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type KeysImpl<'a> = btree_map::Keys<'a, String, Value>;$/;"	t
KeysImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type KeysImpl<'a> = indexmap::map::Keys<'a, String, Value>;$/;"	t
Left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    Left,$/;"	e	enum:Justify
Limb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^pub type Limb = u32;$/;"	t
Limb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^pub type Limb = u64;$/;"	t
LineColIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^impl<I> Iterator for LineColIterator<I>$/;"	c
LineColIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^impl<I> LineColIterator<I>$/;"	c
LineColIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^pub struct LineColIterator<I> {$/;"	s
LineFeed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    LineFeed,$/;"	e	enum:CharEscape
Literal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Literal(MatchLiteralType),$/;"	e	enum:MatchType
LiteralIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^impl<'a> Iterator for LiteralIter<'a> {$/;"	c
LiteralIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^pub enum LiteralIter<'a> {$/;"	g
LiteralSearcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^impl LiteralSearcher {$/;"	c
LiteralSearcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^pub struct LiteralSearcher {$/;"	s
LiteralSearcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^    impl LiteralSearcher {$/;"	c	module:imp
LiteralSearcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^    pub struct LiteralSearcher(());$/;"	s	module:imp
Locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub type Locations = CaptureLocations;$/;"	t
Locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl Locations {$/;"	c
Locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^pub struct Locations(Vec<Slot>);$/;"	s
Locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub type Locations = CaptureLocations;$/;"	t
Logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^impl Logger {$/;"	c
Logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^impl Middleware for Logger {$/;"	c
Logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^pub struct Logger {$/;"	s
Logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^impl Logger {$/;"	c
Logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^impl Middleware for Logger {$/;"	c
Logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^pub struct Logger {$/;"	s
LoneLeadingSurrogateInHexEscape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    LoneLeadingSurrogateInHexEscape,$/;"	e	enum:ErrorCode
Mantissa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^pub trait Mantissa: Integer {$/;"	i
Many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Many(Vec<Hole>),$/;"	e	enum:Hole
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl Clone for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl Debug for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl Default for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl Eq for Map<String, Value> {}$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl Extend<(String, Value)> for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl FromIterator<(String, Value)> for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl IntoIterator for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl PartialEq for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl serde::ser::Serialize for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a, Q> ops::Index<&'a Q> for Map<String, Value>$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a, Q> ops::IndexMut<&'a Q> for Map<String, Value>$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a> IntoIterator for &'a Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a> IntoIterator for &'a mut Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'de> de::Deserialize<'de> for Map<String, Value> {$/;"	c
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct Map<K, V> {$/;"	s
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Map {$/;"	e	enum:Compound
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    Map(String),$/;"	e	enum:KeyClass
Map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    Map {$/;"	e	enum:SerializeMap
MapAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'a, R: 'a> MapAccess<'a, R> {$/;"	c
MapAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::MapAccess<'de> for MapAccess<'a, R> {$/;"	c
MapAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^struct MapAccess<'a, R: 'a> {$/;"	s
MapDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl MapDeserializer {$/;"	c
MapDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> MapAccess<'de> for MapDeserializer {$/;"	c
MapDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for MapDeserializer {$/;"	c
MapDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct MapDeserializer {$/;"	s
MapImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type MapImpl<K, V> = BTreeMap<K, V>;$/;"	t
MapImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type MapImpl<K, V> = IndexMap<K, V>;$/;"	t
MapKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R> de::Deserializer<'de> for MapKey<'a, R>$/;"	c
MapKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^struct MapKey<'a, R: 'a> {$/;"	s
MapKeyDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for MapKeyDeserializer<'de> {$/;"	c
MapKeyDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct MapKeyDeserializer<'de> {$/;"	s
MapKeySerializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::Serializer for MapKeySerializer<'a, W, F>$/;"	c
MapKeySerializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^struct MapKeySerializer<'a, W: 'a, F: 'a> {$/;"	s
MapKeySerializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::Serializer for MapKeySerializer {$/;"	c
MapKeySerializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^struct MapKeySerializer;$/;"	s
MapRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> MapAccess<'de> for MapRefDeserializer<'de> {$/;"	c
MapRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> MapRefDeserializer<'de> {$/;"	c
MapRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for MapRefDeserializer<'de> {$/;"	c
MapRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct MapRefDeserializer<'de> {$/;"	s
Match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    Match(T),$/;"	e	enum:Result
Match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    Match(usize),$/;"	e	enum:Inst
Match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t> Match<'t> {$/;"	c
Match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct Match<'t> {$/;"	s
Match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> Match<'t> {$/;"	c
Match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct Match<'t> {$/;"	s
MatchLiteralType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^enum MatchLiteralType {$/;"	g
MatchNfaType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^enum MatchNfaType {$/;"	g
MatchType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^enum MatchType {$/;"	g
Matcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^enum Matcher {$/;"	g
Matcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^impl Matcher {$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> FusedIterator for Matches<'r, 't> {}$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> Iterator for Matches<'r, 't> {$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct Matches<'r, 't>(re_trait::Matches<'t, ExecNoSync<'r>>);$/;"	s
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'t, R> FusedIterator for Matches<'t, R>$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'t, R> Iterator for Matches<'t, R>$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'t, R> Matches<'t, R>$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^pub struct Matches<'t, R>$/;"	s
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> FusedIterator for Matches<'r, 't> {}$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> Iterator for Matches<'r, 't> {$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct Matches<'r, 't>(re_trait::Matches<'t, ExecNoSyncStr<'r>>);$/;"	s
Math	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^pub(crate) trait Math: Clone + Sized + Default {$/;"	i
MaybeInst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^enum MaybeInst {$/;"	g
MaybeInst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl MaybeInst {$/;"	c
Memmem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Memmem(Memmem),$/;"	e	enum:Matcher
Memmem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^impl Memmem {$/;"	c
Memmem	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^pub struct Memmem {$/;"	s
Message	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    Message(Box<str>),$/;"	e	enum:ErrorCode
Middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^pub trait Middleware: 'static + Send + Sync {$/;"	i
ModeratePathCache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^pub(crate) trait ModeratePathCache {$/;"	i
ModeratePathPowers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^impl ModeratePathPowers {$/;"	c
ModeratePathPowers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^pub(crate) struct ModeratePathPowers {$/;"	s
N	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^enum N {$/;"	g
N	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl Eq for N {}$/;"	c
N	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^type N = String;$/;"	t
NULL	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^        static NULL: Value = Value::Null;$/;"	v	function:index
Named	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    Named(&'a str),$/;"	e	enum:Ref
NegInt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    NegInt(i64),$/;"	e	enum:N
Next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^impl Clone for Next<'_> {$/;"	c
Next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^impl Copy for Next<'_> {}$/;"	c
Next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^impl<'a> Next<'a> {$/;"	c
Next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^pub struct Next<'a> {$/;"	s
Nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Nfa(MatchNfaType),$/;"	e	enum:MatchType
NoExpand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t> Replacer for NoExpand<'t> {$/;"	c
NoExpand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct NoExpand<'t>(pub &'t [u8]);$/;"	s
NoExpand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> Replacer for NoExpand<'t> {$/;"	c
NoExpand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct NoExpand<'t>(pub &'t str);$/;"	s
NoMatch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    NoMatch(usize),$/;"	e	enum:Result
None	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    None,$/;"	e	enum:Hole
NotWordBoundary	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    NotWordBoundary,$/;"	e	enum:EmptyLook
NotWordBoundaryAscii	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    NotWordBoundaryAscii,$/;"	e	enum:EmptyLook
Nothing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Nothing,$/;"	e	enum:MatchType
Null	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    Null,$/;"	e	enum:Value
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    Number(usize),$/;"	e	enum:Ref
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl FromStr for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^pub trait Number: AsCast + ops::Add<Output = Self> {}$/;"	i
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl Debug for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl From<ParserNumber> for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl Serialize for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl fmt::Display for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de, 'a> Deserializer<'de> for &'a Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de> Deserialize<'de> for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de> Deserializer<'de> for Number {$/;"	c
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^pub struct Number {$/;"	s
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Number { ser: &'a mut Serializer<W, F> },$/;"	e	enum:Compound
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    Number,$/;"	e	enum:KeyClass
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    Number(Number),$/;"	e	enum:Value
Number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    Number { out_value: Option<Value> },$/;"	e	enum:SerializeMap
NumberDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de> MapAccess<'de> for NumberDeserializer {$/;"	c
NumberDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^pub(crate) struct NumberDeserializer {$/;"	s
NumberFieldDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de> Deserializer<'de> for NumberFieldDeserializer {$/;"	c
NumberFieldDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^struct NumberFieldDeserializer;$/;"	s
NumberFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de> de::Deserialize<'de> for NumberFromString {$/;"	c
NumberFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^pub struct NumberFromString {$/;"	s
NumberKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^impl<'de> de::Deserialize<'de> for NumberKey {$/;"	c
NumberKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^struct NumberKey;$/;"	s
NumberOutOfRange	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    NumberOutOfRange,$/;"	e	enum:ErrorCode
NumberStrEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W: io::Write, F: Formatter> ser::Serializer for NumberStrEmitter<'a, W, F> {$/;"	c
NumberStrEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^struct NumberStrEmitter<'a, W: 'a + io::Write, F: 'a + Formatter>(&'a mut Serializer<W, F>);$/;"	s
NumberValueEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::Serializer for NumberValueEmitter {$/;"	c
NumberValueEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^struct NumberValueEmitter;$/;"	s
NumberVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^        impl<'de> Visitor<'de> for NumberVisitor {$/;"	c	method:Number::deserialize
NumberVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^        struct NumberVisitor;$/;"	s	method:Number::deserialize
Object	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    Object(Map<String, Value>),$/;"	e	enum:Value
Occupied	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    Occupied(OccupiedEntry<'a>),$/;"	e	enum:Entry
OccupiedEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a> OccupiedEntry<'a> {$/;"	c
OccupiedEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct OccupiedEntry<'a> {$/;"	s
OccupiedEntryImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type OccupiedEntryImpl<'a> = btree_map::OccupiedEntry<'a, String, Value>;$/;"	t
OccupiedEntryImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type OccupiedEntryImpl<'a> = indexmap::map::OccupiedEntry<'a, String, Value>;$/;"	t
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type Ok = ();$/;"	t
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type Ok = ();$/;"	t	implementation:NumberStrEmitter
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type Ok = ();$/;"	t	implementation:RawValueStrEmitter
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = String;$/;"	t	implementation:MapKeySerializer
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:NumberValueEmitter
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:RawValueEmitter
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeMap
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeStructVariant
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeTupleVariant
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:SerializeVec
Ok	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type Ok = Value;$/;"	t	implementation:Serializer
One	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    One(InstPtr),$/;"	e	enum:Hole
Other	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    Other,$/;"	e	enum:ErrorKind
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    type Output = [u8];$/;"	t	implementation:Captures
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    type Output = str;$/;"	t	implementation:Captures
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    type Output = Value;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    type Output = Value;$/;"	t
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    type Output = HeaderValues;$/;"	t	implementation:Request
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    type Output = Result<Response>;$/;"	t	implementation:RequestBuilder
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    type Output = HeaderValues;$/;"	t	implementation:Response
Owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    type Owned = Box<RawValue>;$/;"	t	implementation:RawValue
OwnedRawDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> MapAccess<'de> for OwnedRawDeserializer {$/;"	c
OwnedRawDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^pub struct OwnedRawDeserializer {$/;"	s
POW10	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^static POW10: [f64; 309] = [$/;"	v
Packed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Packed { s: packed::Searcher, lits: Vec<Literal> },$/;"	e	enum:Matcher
Packed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Packed(&'a [Literal]),$/;"	e	enum:LiteralIter
Padding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl Padding {$/;"	c
Padding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub struct Padding {$/;"	s
PaddingBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl PaddingBuilder {$/;"	c
PaddingBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^pub struct PaddingBuilder(Padding);$/;"	s
Parsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^struct Parsed {$/;"	s
ParserNumber	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl ParserNumber {$/;"	c
ParserNumber	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^pub(crate) enum ParserNumber {$/;"	g
Patch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^struct Patch {$/;"	s
PikeVM	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    PikeVM,$/;"	e	enum:MatchNfaType
Pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^impl<T: ::std::fmt::Debug> ::std::fmt::Debug for Pool<T> {$/;"	c
Pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^impl<T: Send> Pool<T> {$/;"	c
Pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^pub struct Pool<T> {$/;"	s
Pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^unsafe impl<T: Send> Sync for Pool<T> {}$/;"	c
PoolGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^impl<'a, T: Send> Drop for PoolGuard<'a, T> {$/;"	c
PoolGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^impl<'a, T: Send> PoolGuard<'a, T> {$/;"	c
PoolGuard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^pub struct PoolGuard<'a, T: Send> {$/;"	s
PosInt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    PosInt(u64),$/;"	e	enum:N
Position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub struct Position {$/;"	s
Program	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl Deref for Program {$/;"	c
Program	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl Program {$/;"	c
Program	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl fmt::Debug for Program {$/;"	c
Program	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^impl<'a> IntoIterator for &'a Program {$/;"	c
Program	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^pub struct Program {$/;"	s
ProgramCache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^pub type ProgramCache = AssertUnwindSafe<RefCell<ProgramCacheInner>>;$/;"	t
ProgramCacheInner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^impl ProgramCacheInner {$/;"	c
ProgramCacheInner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^pub struct ProgramCacheInner {$/;"	s
Quit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    Quit,$/;"	e	enum:Result
Quote	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Quote,$/;"	e	enum:CharEscape
R	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a, 'de, R> Read<'de> for &'a mut R$/;"	c
R	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a, 'de, R> private::Sealed for &'a mut R where R: Read<'de> {}$/;"	c
Range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'t> From<Match<'t>> for Range<usize> {$/;"	c
Range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> From<Match<'t>> for Range<usize> {$/;"	c
Ranges	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Ranges { ranges: Vec<(char, char)> },$/;"	e	enum:InstHole
Ranges	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    Ranges(InstRanges),$/;"	e	enum:Inst
RawKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> Deserialize<'de> for RawKey {$/;"	c
RawKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^struct RawKey;$/;"	s
RawKeyDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> Deserializer<'de> for RawKeyDeserializer {$/;"	c
RawKeyDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^struct RawKeyDeserializer;$/;"	s
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl Debug for RawValue {$/;"	c
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl Display for RawValue {$/;"	c
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl RawValue {$/;"	c
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl Serialize for RawValue {$/;"	c
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl ToOwned for RawValue {$/;"	c
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a RawValue {$/;"	c
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^pub struct RawValue {$/;"	s
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    RawValue { ser: &'a mut Serializer<W, F> },$/;"	e	enum:Compound
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    RawValue,$/;"	e	enum:KeyClass
RawValue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    RawValue { out_value: Option<Value> },$/;"	e	enum:SerializeMap
RawValueEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::Serializer for RawValueEmitter {$/;"	c
RawValueEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^struct RawValueEmitter;$/;"	s
RawValueStrEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W: io::Write, F: Formatter> ser::Serializer for RawValueStrEmitter<'a, W, F> {$/;"	c
RawValueStrEmitter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^struct RawValueStrEmitter<'a, W: 'a + io::Write, F: 'a + Formatter>(&'a mut Serializer<W, F>);$/;"	s
Read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub trait Read<'de>: private::Sealed {$/;"	i
RecursionLimitExceeded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    RecursionLimitExceeded,$/;"	e	enum:ErrorCode
Redirect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^impl Default for Redirect {$/;"	c
Redirect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^impl Middleware for Redirect {$/;"	c
Redirect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^impl Redirect {$/;"	c
Redirect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^pub struct Redirect {$/;"	s
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^enum Ref<'a> {$/;"	g
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^impl From<usize> for Ref<'static> {$/;"	c
Ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^impl<'a> From<&'a str> for Ref<'a> {$/;"	c
Reference	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'b, 'c, T> Deref for Reference<'b, 'c, T>$/;"	c
Reference	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub enum Reference<'b, 'c, T>$/;"	g
ReferenceFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> DeserializeSeed<'de> for ReferenceFromString {$/;"	c
ReferenceFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^impl<'de> Visitor<'de> for ReferenceFromString {$/;"	c
ReferenceFromString	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^pub struct ReferenceFromString;$/;"	s
ReferenceVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^        impl<'de> Visitor<'de> for ReferenceVisitor {$/;"	c	method:RawValue::deserialize
ReferenceVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^        struct ReferenceVisitor;$/;"	s	method:RawValue::deserialize
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^impl<'r, 't> Pattern<'t> for &'r Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl From<Exec> for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl FromStr for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl fmt::Debug for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl fmt::Display for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct Regex(Exec);$/;"	s
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl From<Exec> for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl FromStr for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl fmt::Debug for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl fmt::Display for Regex {$/;"	c
Regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct Regex(Exec);$/;"	s
RegexOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^impl Default for RegexOptions {$/;"	c
RegexOptions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^pub struct RegexOptions {$/;"	s
RegexSearcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^pub struct RegexSearcher<'r, 't> {$/;"	s
RegexSearcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^unsafe impl<'r, 't> Searcher<'t> for RegexSearcher<'r, 't> {$/;"	c
RegularExpression	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^pub trait RegularExpression: Sized + fmt::Debug {$/;"	i
Replacer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub trait Replacer {$/;"	i
Replacer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub trait Replacer {$/;"	i
ReplacerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'a, R: Replacer + ?Sized + 'a> Replacer for ReplacerRef<'a, R> {$/;"	c
ReplacerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct ReplacerRef<'a, R: ?Sized>(&'a mut R);$/;"	s
ReplacerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'a, R: Replacer + ?Sized + 'a> Replacer for ReplacerRef<'a, R> {$/;"	c
ReplacerRef	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct ReplacerRef<'a, R: ?Sized>(&'a mut R);$/;"	s
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl AsMut<http::Headers> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl AsMut<http::Request> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl AsRef<http::Headers> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl AsRef<http::Request> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl From<http::Request> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl Index<&str> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl Index<HeaderName> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl Into<http::Request> for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl IntoIterator for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl fmt::Debug for Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl<'a> IntoIterator for &'a Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^impl<'a> IntoIterator for &'a mut Request {$/;"	c
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^pub struct Request {$/;"	s
Request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^impl From<RequestBuilder> for Request {$/;"	c
RequestBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^impl Future for RequestBuilder {$/;"	c
RequestBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^impl RequestBuilder {$/;"	c
RequestBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^impl fmt::Debug for RequestBuilder {$/;"	c
RequestBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^pub struct RequestBuilder {$/;"	s
RequestPairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^impl<'a> log::kv::Source for RequestPairs<'a> {$/;"	c
RequestPairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^struct RequestPairs<'a> {$/;"	s
RequestPairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^impl<'a> log::kv::Source for RequestPairs<'a> {$/;"	c
RequestPairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^struct RequestPairs<'a> {$/;"	s
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl AsMut<http::Headers> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl AsMut<http::Response> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl AsRef<http::Headers> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl AsRef<http::Response> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl AsyncRead for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl BufRead for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl From<http::Response> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl Index<&str> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl Index<HeaderName> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl Into<http::Response> for Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl Response {$/;"	c
Response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^impl fmt::Debug for Response {$/;"	c
ResponsePairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^impl<'a> log::kv::Source for ResponsePairs<'a> {$/;"	c
ResponsePairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^struct ResponsePairs<'a> {$/;"	s
ResponsePairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^impl log::kv::Source for ResponsePairs {$/;"	c
ResponsePairs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^struct ResponsePairs {$/;"	s
Rest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Rest,$/;"	e	enum:State
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^type Result = result::Result<Patch, Error>;$/;"	t
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl<T> Result<T> {$/;"	c
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^pub enum Result<T> {$/;"	g
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^pub type Result<T> = result::Result<T, Error>;$/;"	t
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^pub type Result<T> = result::Result<T, Error>;$/;"	t
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^pub type Result<T = Response> = std::result::Result<T, Error>;$/;"	t
ResultOrEmpty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^type ResultOrEmpty = result::Result<Option<Patch>, Error>;$/;"	t
ReverseSolidus	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    ReverseSolidus,$/;"	e	enum:CharEscape
Right	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    Right,$/;"	e	enum:Justify
Row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^pub trait Row {$/;"	i
RowStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^impl Buffers for RowStruct {$/;"	c
RowStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^impl Row for RowStruct {$/;"	c
RowStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^impl RowStruct {$/;"	c
RowStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^pub struct RowStruct {$/;"	s
Save	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Save { slot: usize },$/;"	e	enum:InstHole
Save	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    Save(InstSave),$/;"	e	enum:Inst
SaveRestore	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    SaveRestore { slot: usize, old_pos: Option<usize> },$/;"	e	enum:Job
Sealed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    pub trait Sealed {}$/;"	i	module:private
Sealed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    pub trait Sealed {}$/;"	i	module:private
Searcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    type Searcher = RegexSearcher<'r, 't>;$/;"	t	implementation:Regex
Separator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Default for Separator {$/;"	c
Separator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Separator {$/;"	c
Separator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct Separator {$/;"	s
SeparatorBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl SeparatorBuilder {$/;"	c
SeparatorBuilder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct SeparatorBuilder(Separator);$/;"	s
SeqAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'a, R: 'a> SeqAccess<'a, R> {$/;"	c
SeqAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::SeqAccess<'de> for SeqAccess<'a, R> {$/;"	c
SeqAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^struct SeqAccess<'a, R: 'a> {$/;"	s
SeqDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl SeqDeserializer {$/;"	c
SeqDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> SeqAccess<'de> for SeqDeserializer {$/;"	c
SeqDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for SeqDeserializer {$/;"	c
SeqDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct SeqDeserializer {$/;"	s
SeqRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> SeqAccess<'de> for SeqRefDeserializer<'de> {$/;"	c
SeqRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> SeqRefDeserializer<'de> {$/;"	c
SeqRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for SeqRefDeserializer<'de> {$/;"	c
SeqRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct SeqRefDeserializer<'de> {$/;"	s
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeMap = Compound<'a, W, F>;$/;"	t
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeMap = Impossible<(), Error>;$/;"	t
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeMap = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeMap = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeMap = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeMap = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeMap = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeMap = SerializeMap;$/;"	t	implementation:Serializer
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeMap for SerializeMap {$/;"	c
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeStruct for SerializeMap {$/;"	c
SerializeMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^pub enum SerializeMap {$/;"	g
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeSeq = Compound<'a, W, F>;$/;"	t
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeSeq = Impossible<(), Error>;$/;"	t
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeSeq = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeSeq = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeSeq = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeSeq = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeSeq = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeSeq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeSeq = SerializeVec;$/;"	t	implementation:Serializer
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStruct = Compound<'a, W, F>;$/;"	t
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStruct = Impossible<(), Error>;$/;"	t
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStruct = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStruct = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStruct = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStruct = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStruct = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStruct = SerializeMap;$/;"	t	implementation:Serializer
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStructVariant = Compound<'a, W, F>;$/;"	t
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStructVariant = Impossible<(), Error>;$/;"	t
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStructVariant = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeStructVariant = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStructVariant = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStructVariant = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStructVariant = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeStructVariant = SerializeStructVariant;$/;"	t	implementation:Serializer
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeStructVariant for SerializeStructVariant {$/;"	c
SerializeStructVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^pub struct SerializeStructVariant {$/;"	s
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTuple = Compound<'a, W, F>;$/;"	t
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTuple = Impossible<(), Error>;$/;"	t
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTuple = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTuple = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTuple = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTuple = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTuple = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeTuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTuple = SerializeVec;$/;"	t	implementation:Serializer
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleStruct = Compound<'a, W, F>;$/;"	t
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleStruct = Impossible<(), Error>;$/;"	t
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleStruct = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleStruct = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleStruct = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleStruct = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleStruct = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeTupleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleStruct = SerializeVec;$/;"	t	implementation:Serializer
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleVariant = Compound<'a, W, F>;$/;"	t
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleVariant = Impossible<(), Error>;$/;"	t
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleVariant = Impossible<(), Error>;$/;"	t	implementation:NumberStrEmitter
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    type SerializeTupleVariant = Impossible<(), Error>;$/;"	t	implementation:RawValueStrEmitter
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleVariant = Impossible<String, Error>;$/;"	t	implementation:MapKeySerializer
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleVariant = Impossible<Value, Error>;$/;"	t	implementation:NumberValueEmitter
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleVariant = Impossible<Value, Error>;$/;"	t	implementation:RawValueEmitter
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    type SerializeTupleVariant = SerializeTupleVariant;$/;"	t	implementation:Serializer
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeTupleVariant for SerializeTupleVariant {$/;"	c
SerializeTupleVariant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^pub struct SerializeTupleVariant {$/;"	s
SerializeVec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeSeq for SerializeVec {$/;"	c
SerializeVec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeTuple for SerializeVec {$/;"	c
SerializeVec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::ser::SerializeTupleStruct for SerializeVec {$/;"	c
SerializeVec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^pub struct SerializeVec {$/;"	s
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W, F> ser::Serializer for &'a mut Serializer<W, F>$/;"	c
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<'a, W> Serializer<W, PrettyFormatter<'a>>$/;"	c
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<W, F> Serializer<W, F>$/;"	c
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^impl<W> Serializer<W>$/;"	c
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub struct Serializer<W, F = CompactFormatter> {$/;"	s
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl serde::Serializer for Serializer {$/;"	c
Serializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^pub struct Serializer;$/;"	s
Single	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    Single(&'a [u8]),$/;"	e	enum:LiteralIter
SingleByteSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^impl SingleByteSet {$/;"	c
SingleByteSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^struct SingleByteSet {$/;"	s
SliceRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> Fused for SliceRead<'a> {}$/;"	c
SliceRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> Read<'a> for SliceRead<'a> {$/;"	c
SliceRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> SliceRead<'a> {$/;"	c
SliceRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> private::Sealed for SliceRead<'a> {}$/;"	c
SliceRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub struct SliceRead<'a> {$/;"	s
Slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^pub type Slot = Option<usize>;$/;"	t
Solidus	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Solidus,$/;"	e	enum:CharEscape
SparseSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^impl Deref for SparseSet {$/;"	c
SparseSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^impl SparseSet {$/;"	c
SparseSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^impl fmt::Debug for SparseSet {$/;"	c
SparseSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^impl<'a> IntoIterator for &'a SparseSet {$/;"	c
SparseSet	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^pub struct SparseSet {$/;"	s
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Split,$/;"	e	enum:MaybeInst
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    Split(InstSplit),$/;"	e	enum:Inst
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> FusedIterator for Split<'r, 't> {}$/;"	c
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> Iterator for Split<'r, 't> {$/;"	c
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct Split<'r, 't> {$/;"	s
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> FusedIterator for Split<'r, 't> {}$/;"	c
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> Iterator for Split<'r, 't> {$/;"	c
Split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct Split<'r, 't> {$/;"	s
Split1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Split1(InstPtr),$/;"	e	enum:MaybeInst
Split2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Split2(InstPtr),$/;"	e	enum:MaybeInst
SplitN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> FusedIterator for SplitN<'r, 't> {}$/;"	c
SplitN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'r, 't> Iterator for SplitN<'r, 't> {$/;"	c
SplitN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct SplitN<'r, 't> {$/;"	s
SplitN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> FusedIterator for SplitN<'r, 't> {}$/;"	c
SplitN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'r, 't> Iterator for SplitN<'r, 't> {$/;"	c
SplitN	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct SplitN<'r, 't> {$/;"	s
StartLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    StartLine,$/;"	e	enum:EmptyLook
StartText	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    StartText,$/;"	e	enum:EmptyLook
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl fmt::Debug for State {$/;"	c
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct State {$/;"	s
State	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub enum State {$/;"	g
StateFlags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl StateFlags {$/;"	c
StateFlags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl fmt::Debug for StateFlags {$/;"	c
StateFlags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct StateFlags(u8);$/;"	s
StateMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl StateMap {$/;"	c
StateMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct StateMap {$/;"	s
StatePtr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^type StatePtr = u32;$/;"	t
StrRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> Fused for StrRead<'a> {}$/;"	c
StrRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> Read<'a> for StrRead<'a> {$/;"	c
StrRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> StrRead<'a> {$/;"	c
StrRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^impl<'a> private::Sealed for StrRead<'a> {}$/;"	c
StrRead	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^pub struct StrRead<'a> {$/;"	s
StreamDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, R, T> FusedIterator for StreamDeserializer<'de, R, T>$/;"	c
StreamDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, R, T> Iterator for StreamDeserializer<'de, R, T>$/;"	c
StreamDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, R, T> StreamDeserializer<'de, R, T>$/;"	c
StreamDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^pub struct StreamDeserializer<'de, R, T> {$/;"	s
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl Replacer for String {$/;"	c
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'a> Replacer for &'a String {$/;"	c
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    String(String),$/;"	e	enum:ParserNumber
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    impl Sealed for super::String {}$/;"	c	module:private
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl Index for String {$/;"	c
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    String(String),$/;"	e	enum:Value
String	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^impl PartialEq<Value> for String {$/;"	c
Style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^pub trait Style {$/;"	i
StyleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^impl Style for StyleStruct {$/;"	c
StyleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^impl StyleStruct {$/;"	c
StyleStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^pub(crate) struct StyleStruct {$/;"	s
SubCaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'c, 't> FusedIterator for SubCaptureMatches<'c, 't> {}$/;"	c
SubCaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'c, 't> Iterator for SubCaptureMatches<'c, 't> {$/;"	c
SubCaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^pub struct SubCaptureMatches<'c, 't> {$/;"	s
SubCaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'c, 't> FusedIterator for SubCaptureMatches<'c, 't> {}$/;"	c
SubCaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'c, 't> Iterator for SubCaptureMatches<'c, 't> {$/;"	c
SubCaptureMatches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub struct SubCaptureMatches<'c, 't> {$/;"	s
SubCapturesPosIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'c> FusedIterator for SubCapturesPosIter<'c> {}$/;"	c
SubCapturesPosIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^impl<'c> Iterator for SubCapturesPosIter<'c> {$/;"	c
SubCapturesPosIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^pub struct SubCapturesPosIter<'c> {$/;"	s
SuffixCache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^impl SuffixCache {$/;"	c
SuffixCache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^struct SuffixCache {$/;"	s
SuffixCacheEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^struct SuffixCacheEntry {$/;"	s
SuffixCacheKey	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^struct SuffixCacheKey {$/;"	s
Syntax	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^    Syntax(String),$/;"	e	enum:Error
Syntax	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    Syntax,$/;"	e	enum:Category
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl<T> Cell for T$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^impl<T, C> Row for T$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl<T, R> Table for T$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/title.rs	/^impl<'a, T, R> WithTitle for T$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl<'a, T: Input> Input for &'a T {$/;"	c
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}$/;"	c	module:private
T	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl<'a, T> Index for &'a T$/;"	c
Tab	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    Tab,$/;"	e	enum:CharEscape
Table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub trait Table {$/;"	i
TableFormat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub(crate) struct TableFormat {$/;"	s
TableStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/csv.rs	/^impl<R: Read> TryFrom<&mut Reader<R>> for TableStruct {$/;"	c
TableStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Style for TableStruct {$/;"	c
TableStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Table for TableStruct {$/;"	c
TableStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl TableStruct {$/;"	c
TableStruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct TableStruct {$/;"	s
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    type Target = [u8];$/;"	t	implementation:ByteInput
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    type Target = [u8];$/;"	t	implementation:CharInput
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    type Target = [Inst];$/;"	t	implementation:Program
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    type Target = [usize];$/;"	t	implementation:SparseSet
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    type Target = T;$/;"	t
Text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    type Text = [u8];$/;"	t	implementation:ExecNoSync
Text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    type Text = str;$/;"	t	implementation:ExecNoSyncStr
Text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    type Text: ?Sized + fmt::Debug;$/;"	t	interface:RegularExpression
Threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^impl Threads {$/;"	c
Threads	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^struct Threads {$/;"	s
Title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/title.rs	/^pub trait Title {$/;"	i
Top	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    Top,$/;"	e	enum:Align
TrailingCharacters	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    TrailingCharacters,$/;"	e	enum:ErrorCode
TrailingComma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    TrailingComma,$/;"	e	enum:ErrorCode
Transitions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl Transitions {$/;"	c
Transitions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl fmt::Debug for Transitions {$/;"	c
Transitions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct Transitions {$/;"	s
TransitionsRow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^impl<'a> fmt::Debug for TransitionsRow<'a> {$/;"	c
TransitionsRow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^struct TransitionsRow<'a>(&'a [StatePtr]);$/;"	s
Type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl<'a> fmt::Display for Type<'a> {$/;"	c
Type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^struct Type<'a>(&'a Value);$/;"	s
U64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    U64(u64),$/;"	e	enum:ParserNumber
Unanchored	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    Unanchored,$/;"	e	enum:MatchLiteralType
Uncompiled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    Uncompiled(InstHole),$/;"	e	enum:MaybeInst
UnexpectedEndOfHexEscape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    UnexpectedEndOfHexEscape,$/;"	e	enum:ErrorCode
UnitOnly	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> de::VariantAccess<'de> for UnitOnly {$/;"	c
UnitOnly	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct UnitOnly;$/;"	s
UnitVariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'a, R: 'a> UnitVariantAccess<'a, R> {$/;"	c
UnitVariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::EnumAccess<'de> for UnitVariantAccess<'a, R> {$/;"	c
UnitVariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::VariantAccess<'de> for UnitVariantAccess<'a, R> {$/;"	c
UnitVariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^struct UnitVariantAccess<'a, R: 'a> {$/;"	s
Unsigned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    type Unsigned = u32;$/;"	t	implementation:f32
Unsigned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    type Unsigned = u64;$/;"	t	implementation:f64
Unsigned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    type Unsigned: Integer;$/;"	t	interface:Float
Vacant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    Vacant(VacantEntry<'a>),$/;"	e	enum:Entry
VacantEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^impl<'a> VacantEntry<'a> {$/;"	c
VacantEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct VacantEntry<'a> {$/;"	s
VacantEntryImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type VacantEntryImpl<'a> = btree_map::VacantEntry<'a, String, Value>;$/;"	t
VacantEntryImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type VacantEntryImpl<'a> = indexmap::map::VacantEntry<'a, String, Value>;$/;"	t
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^            type Value = Map<String, Value>;$/;"	t	implementation:Map::deserialize::Visitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            type Value = ();$/;"	t	implementation:NumberKey::deserialize::FieldVisitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            type Value = Number;$/;"	t	implementation:Number::deserialize::NumberVisitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            type Value = NumberFromString;$/;"	t	implementation:NumberFromString::deserialize::Visitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            type Value = &'de RawValue;$/;"	t	implementation:RawValue::deserialize::ReferenceVisitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            type Value = ();$/;"	t	implementation:RawKey::deserialize::FieldVisitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            type Value = Box<RawValue>;$/;"	t	implementation:Box::deserialize::BoxedVisitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    type Value = &'de RawValue;$/;"	t	implementation:ReferenceFromString
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    type Value = Box<RawValue>;$/;"	t	implementation:BoxedFromString
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            type Value = Value;$/;"	t	implementation:Value::deserialize::ValueVisitor
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Value = KeyClass;$/;"	t	implementation:KeyClassifier
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl FromStr for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> Deserialize<'de> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> IntoDeserializer<'de, Error> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for &'de Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> serde::Deserializer<'de> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<()> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<Map<String, Value>> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<Number> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<String> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<bool> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<f32> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl From<f64> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl<'a, T: Clone + Into<Value>> From<&'a [T]> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl<'a> From<&'a str> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl<'a> From<Cow<'a, str>> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl<K: Into<String>, V: Into<Value>> FromIterator<(K, V)> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl<T: Into<Value>> From<Vec<T>> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^impl<T: Into<Value>> FromIterator<T> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl<I> ops::Index<I> for Value$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl<I> ops::IndexMut<I> for Value$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^impl Debug for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^impl Default for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^impl Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^impl fmt::Display for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^pub enum Value {$/;"	g
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^impl PartialEq<String> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^impl PartialEq<str> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^impl<'a> PartialEq<&'a str> for Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^impl Serialize for Value {$/;"	c
ValueVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^        impl<'de> Visitor<'de> for ValueVisitor {$/;"	c	method:Value::deserialize
ValueVisitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^        struct ValueVisitor;$/;"	s	method:Value::deserialize
Values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct Values<'a> {$/;"	s
ValuesImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type ValuesImpl<'a> = btree_map::Values<'a, String, Value>;$/;"	t
ValuesImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type ValuesImpl<'a> = indexmap::map::Values<'a, String, Value>;$/;"	t
ValuesMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^pub struct ValuesMut<'a> {$/;"	s
ValuesMutImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type ValuesMutImpl<'a> = btree_map::ValuesMut<'a, String, Value>;$/;"	t
ValuesMutImpl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^type ValuesMutImpl<'a> = indexmap::map::ValuesMut<'a, String, Value>;$/;"	t
Variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Variant = Self;$/;"	t	implementation:UnitVariantAccess
Variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    type Variant = Self;$/;"	t	implementation:VariantAccess
Variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Variant = UnitOnly;$/;"	t	implementation:BorrowedCowStrDeserializer
Variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Variant = VariantDeserializer;$/;"	t	implementation:EnumDeserializer
Variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    type Variant = VariantRefDeserializer<'de>;$/;"	t	implementation:EnumRefDeserializer
VariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'a, R: 'a> VariantAccess<'a, R> {$/;"	c
VariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::EnumAccess<'de> for VariantAccess<'a, R> {$/;"	c
VariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^impl<'de, 'a, R: Read<'de> + 'a> de::VariantAccess<'de> for VariantAccess<'a, R> {$/;"	c
VariantAccess	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^struct VariantAccess<'a, R: 'a> {$/;"	s
VariantDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> VariantAccess<'de> for VariantDeserializer {$/;"	c
VariantDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct VariantDeserializer {$/;"	s
VariantRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^impl<'de> VariantAccess<'de> for VariantRefDeserializer<'de> {$/;"	c
VariantRefDeserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^struct VariantRefDeserializer<'de> {$/;"	s
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^impl From<RowDimension> for Vec<Dimension> {$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^impl From<TableDimension> for Vec<Dimension> {$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl Replacer for Vec<u8> {$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'a> Replacer for &'a Vec<u8> {$/;"	c
Vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^impl Write for Vec<u8> {$/;"	c
VerticalLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl Default for VerticalLine {$/;"	c
VerticalLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^impl VerticalLine {$/;"	c
VerticalLine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^pub struct VerticalLine {$/;"	s
Visitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^        impl<'de> de::Visitor<'de> for Visitor {$/;"	c	method:Map::deserialize
Visitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^        struct Visitor;$/;"	s	method:Map::deserialize
Visitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^        impl<'de> de::Visitor<'de> for Visitor {$/;"	c	method:NumberFromString::deserialize
Visitor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^        struct Visitor;$/;"	s	method:NumberFromString::deserialize
W	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^impl<W: Write> Write for &mut W {$/;"	c
Wide	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^type Wide = u128;$/;"	t
Wide	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^type Wide = u64;$/;"	t
WithTitle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/title.rs	/^pub trait WithTitle {$/;"	i
WordBoundary	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    WordBoundary,$/;"	e	enum:EmptyLook
WordBoundaryAscii	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    WordBoundaryAscii,$/;"	e	enum:EmptyLook
Write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^pub trait Write {$/;"	i
WriterFormatter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {$/;"	c	method:Value::fmt
WriterFormatter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^        struct WriterFormatter<'a, 'b: 'a> {$/;"	s	method:Value::fmt
__Nonexhaustive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^    __Nonexhaustive,$/;"	e	enum:Error
_find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn _find(&self, haystack: &[u8]) -> Option<usize> {$/;"	P	implementation:SingleByteSet
_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    _priv: (),$/;"	m	struct:Logger
_priv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    _priv: (),$/;"	m	struct:Logger
ac	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    ac: Option<AhoCorasick<u32>>,$/;"	m	struct:ExecReadOnly
add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn add(&mut self) -> Option<StatePtr> {$/;"	P	implementation:Transitions
add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn add($/;"	P	implementation:Fsm
add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn add(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn add(x: Limb, y: Limb) -> (Limb, bool) {$/;"	f	module:scalar
add_digit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/digit.rs	/^pub(crate) fn add_digit(value: u64, digit: u32) -> Option<u64> {$/;"	f
add_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn add_state(&mut self, state: State) -> Option<StatePtr> {$/;"	P	implementation:Fsm
add_step	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn add_step($/;"	P	implementation:Fsm
algorithm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod algorithm;$/;"	n
align	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    align: Align,$/;"	m	struct:CellFormat
align	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn align(mut self, align: Align) -> CellStruct {$/;"	P	implementation:CellStruct
all_ascii	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    all_ascii: bool,$/;"	m	struct:SingleByteSet
alternation_literals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^fn alternation_literals(expr: &Hir) -> Option<Vec<Vec<u8>>> {$/;"	f
and_modify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn and_modify<F>(self, f: F) -> Self$/;"	P	implementation:Entry
append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn append(&mut self, other: &mut Self) {$/;"	P	implementation:Map
append_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn append_header(&mut self, name: impl Into<HeaderName>, values: impl ToHeaderValues) {$/;"	P	implementation:Request
append_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn append_header(&mut self, key: impl Into<HeaderName>, value: impl ToHeaderValues) {$/;"	P	implementation:Response
approximate_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn approximate_size(&self) -> usize {$/;"	P	implementation:Fsm
approximate_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn approximate_size(&self) -> usize {$/;"	P	implementation:Memmem
approximate_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn approximate_size(&self) -> usize {$/;"	P	implementation:SingleByteSet
approximate_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn approximate_size(&self) -> usize {$/;"	P	implementation:LiteralSearcher
approximate_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn approximate_size(&self) -> usize {$/;"	P	implementation:imp::LiteralSearcher
approximate_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn approximate_size(&self) -> usize {$/;"	P	implementation:Program
as_array	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_array(&self) -> Option<&Vec<Value>> {$/;"	P	implementation:Value
as_array_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_array_mut(&mut self) -> Option<&mut Vec<Value>> {$/;"	P	implementation:Value
as_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_bool(&self) -> Option<bool> {$/;"	P	implementation:Value
as_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn as_byte(&self) -> Option<u8> {$/;"	P	implementation:Byte
as_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn as_bytes(&self) -> &[u8] {$/;"	P	implementation:ByteInput
as_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn as_bytes(&self) -> &[u8] {$/;"	P	implementation:CharInput
as_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn as_bytes(&self) -> &[u8] {$/;"	P	implementation:T
as_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn as_bytes(&self) -> &[u8];$/;"	P	interface:Input
as_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn as_bytes(&self) -> &'t [u8] {$/;"	P	implementation:Match
as_cast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_cast<N: AsPrimitive>(n: N) -> Self;$/;"	P	interface:AsCast
as_cast_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^macro_rules! as_cast_impl {$/;"	M
as_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_f32(self) -> f32;$/;"	P	interface:AsPrimitive
as_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_f64(self) -> f64;$/;"	P	interface:AsPrimitive
as_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn as_f64(&self) -> Option<f64> {$/;"	P	implementation:Number
as_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_f64(&self) -> Option<f64> {$/;"	P	implementation:Value
as_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn as_i64(&self) -> Option<i64> {$/;"	P	implementation:Number
as_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_i64(&self) -> Option<i64> {$/;"	P	implementation:Value
as_limb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^pub(crate) fn as_limb<T: Integer>(t: T) -> Limb {$/;"	f
as_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn as_mut(&mut self) -> &mut http::Headers {$/;"	P	implementation:Request
as_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn as_mut(&mut self) -> &mut http::Request {$/;"	P	implementation:Request
as_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn as_mut(&mut self) -> &mut http::Headers {$/;"	P	implementation:Response
as_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn as_mut(&mut self) -> &mut http::Response {$/;"	P	implementation:Response
as_null	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_null(&self) -> Option<()> {$/;"	P	implementation:Value
as_object	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_object(&self) -> Option<&Map<String, Value>> {$/;"	P	implementation:Value
as_object_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_object_mut(&mut self) -> Option<&mut Map<String, Value>> {$/;"	P	implementation:Value
as_primitive_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^macro_rules! as_primitive_impl {$/;"	M
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn as_ref(&self) -> &http::Headers {$/;"	P	implementation:Request
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn as_ref(&self) -> &http::Request {$/;"	P	implementation:Request
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn as_ref(&self) -> &http::Headers {$/;"	P	implementation:Response
as_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn as_ref(&self) -> &http::Response {$/;"	P	implementation:Response
as_slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    pub(crate) fn as_slots(&mut self) -> &mut [Slot] {$/;"	P	implementation:Locations
as_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Regex
as_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn as_str(&self) -> &'t str {$/;"	P	implementation:Match
as_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Regex
as_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^fn as_str<'de, 's, R: Read<'de>>(read: &R, slice: &'s [u8]) -> Result<&'s str> {$/;"	f
as_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_str(&self) -> Option<&str> {$/;"	P	implementation:Value
as_u128	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_u128(self) -> u128;$/;"	P	interface:AsPrimitive
as_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_u32(self) -> u32;$/;"	P	interface:AsPrimitive
as_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_u64(self) -> u64;$/;"	P	interface:AsPrimitive
as_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn as_u64(&self) -> Option<u64> {$/;"	P	implementation:Number
as_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn as_u64(&self) -> Option<u64> {$/;"	P	implementation:Value
as_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn as_usize(self) -> usize;$/;"	P	interface:AsPrimitive
as_wide	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^fn as_wide<T: Integer>(t: T) -> Wide {$/;"	f
at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    at: usize,$/;"	m	struct:Fsm
at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn at(&self, i: usize) -> InputAt {$/;"	P	implementation:ByteInput
at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn at(&self, i: usize) -> InputAt {$/;"	P	implementation:CharInput
at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn at(&self, i: usize) -> InputAt {$/;"	P	implementation:T
at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn at(&self, i: usize) -> InputAt;$/;"	P	interface:Input
attempts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^    attempts: u8,$/;"	m	struct:Redirect
automatic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn automatic(mut self) -> Self {$/;"	P	implementation:ExecBuilder
avoid_overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn avoid_overflow<F>(fp: &mut ExtendedFloat)$/;"	f
b_extended	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^pub(super) fn b_extended<F: Float>(f: F) -> ExtendedFloat {$/;"	f
background_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn background_color(mut self, background_color: Option<Color>) -> Self {$/;"	P	implementation:CellStruct
background_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn background_color(mut self, background_color: Option<Color>) -> Self {$/;"	P	implementation:StyleStruct
background_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn background_color(self, background_color: Option<Color>) -> Self;$/;"	P	interface:Style
background_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn background_color(mut self, background_color: Option<Color>) -> Self {$/;"	P	implementation:TableStruct
backtrack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    fn backtrack(&mut self, start: InputAt) -> bool {$/;"	P	implementation:Bounded
backtrack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub backtrack: backtrack::Cache,$/;"	m	struct:ProgramCacheInner
backtrack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod backtrack;$/;"	n
base	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    base: usize,$/;"	m	struct:InstPtrs
base_url	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    base_url: Option<Url>,$/;"	m	struct:Client
base_url	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    fn base_url() {$/;"	f	module:client_tests
begin_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn begin_raw_buffering(&mut self) {$/;"	P	implementation:SliceRead
begin_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn begin_raw_buffering(&mut self) {$/;"	P	implementation:StrRead
begin_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn begin_raw_buffering(&mut self) {$/;"	f
begin_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn begin_raw_buffering(&mut self);$/;"	P	interface:Read
begin_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>$/;"	P	interface:Formatter
bh_extended	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^pub(super) fn bh_extended<F: Float>(f: F) -> ExtendedFloat {$/;"	f
bhcomp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^pub(crate) fn bhcomp<F>(b: F, integer: &[u8], mut fraction: &[u8], exponent: i32) -> F$/;"	f
bhcomp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod bhcomp;$/;"	n
bias	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub bias: i32,$/;"	m	struct:ModeratePathPowers
bignum	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod bignum;$/;"	n
bit_length	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn bit_length(&self) -> usize {$/;"	P	interface:Math
bit_length	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn bit_length(x: &[Limb]) -> usize {$/;"	f	module:small
body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn body(mut self, body: impl Into<Body>) -> Self {$/;"	P	implementation:RequestBuilder
body_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn body_bytes(&mut self, bytes: impl AsRef<[u8]>) {$/;"	P	implementation:Request
body_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub async fn body_bytes(&mut self) -> crate::Result<Vec<u8>> {$/;"	P	implementation:Response
body_file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub async fn body_file(&mut self, path: impl AsRef<std::path::Path>) -> std::io::Result<()> /;"	P	implementation:Request
body_form	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn body_form(&mut self, form: &impl Serialize) -> crate::Result<()> {$/;"	P	implementation:Request
body_form	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub async fn body_form<T: serde::de::DeserializeOwned>(&mut self) -> crate::Result<T> {$/;"	P	implementation:Response
body_json	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn body_json(&mut self, json: &impl Serialize) -> crate::Result<()> {$/;"	P	implementation:Request
body_json	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub async fn body_json<T: DeserializeOwned>(&mut self) -> crate::Result<T> {$/;"	P	implementation:Response
body_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn body_string(&mut self, string: String) {$/;"	P	implementation:Request
body_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub async fn body_string(&mut self) -> crate::Result<String> {$/;"	P	implementation:Response
bold	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn bold(mut self, bold: bool) -> Self {$/;"	P	implementation:CellStruct
bold	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn bold(mut self, bold: bool) -> Self {$/;"	P	implementation:StyleStruct
bold	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn bold(self, bold: bool) -> Self;$/;"	P	interface:Style
bold	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn bold(mut self, bold: bool) -> Self {$/;"	P	implementation:TableStruct
border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn border(mut self, border: Border) -> Self {$/;"	P	implementation:TableStruct
bottom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn bottom(mut self, bottom_padding: usize) -> Self {$/;"	P	implementation:PaddingBuilder
bottom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn bottom(mut self, bottom: HorizontalLine) -> Self {$/;"	P	implementation:BorderBuilder
bounded_backtracking	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn bounded_backtracking(mut self) -> Self {$/;"	P	implementation:ExecBuilder
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn buffer($/;"	P	implementation:CellStruct
buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/buffers.rs	/^    fn buffers($/;"	P	interface:Buffers
buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn buffers($/;"	P	implementation:CellStruct
buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod buffers;$/;"	n
buffers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn buffers($/;"	P	implementation:RowStruct
build	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn build(self) -> Padding {$/;"	P	implementation:PaddingBuilder
build	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn build(self) -> Border {$/;"	P	implementation:BorderBuilder
build	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn build(self) -> Separator {$/;"	P	implementation:SeparatorBuilder
build	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn build(self) -> Result<Exec, Error> {$/;"	P	implementation:ExecBuilder
build	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn build(self) -> Request {$/;"	P	implementation:RequestBuilder
build_aho_corasick	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn build_aho_corasick(&self, parsed: &Parsed) -> Option<AhoCorasick<u32>> {$/;"	P	implementation:ExecBuilder
builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn builder() -> PaddingBuilder {$/;"	P	implementation:Padding
builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn builder() -> BorderBuilder {$/;"	P	implementation:Border
builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn builder() -> SeparatorBuilder {$/;"	P	implementation:Separator
builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn builder(method: Method, url: Url) -> RequestBuilder {$/;"	P	implementation:Request
by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {$/;"	P	interface:Replacer
by_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {$/;"	P	interface:Replacer
byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn byte(b: u8) -> Self {$/;"	P	implementation:Byte
byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    byte: Option<u8>,$/;"	m	struct:InputAt
byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn byte(&self) -> Option<u8> {$/;"	P	implementation:InputAt
byte_class	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn byte_class(&self, b: Byte) -> usize {$/;"	P	implementation:Fsm
byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    byte_classes: ByteClassSet,$/;"	m	struct:Compiler
byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn byte_classes(&self) -> Vec<u8> {$/;"	P	implementation:ByteClassSet
byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn byte_classes() {$/;"	f	module:tests
byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub byte_classes: Vec<u8>,$/;"	m	struct:Program
byte_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn byte_offset(&self) -> usize {$/;"	f
byte_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    pub fn byte_offset(&self) -> usize {$/;"	f
byte_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn byte_offset(&self) -> usize {$/;"	P	implementation:SliceRead
byte_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn byte_offset(&self) -> usize {$/;"	P	implementation:StrRead
byte_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn byte_offset(&self) -> usize {$/;"	f
byte_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn byte_offset(&self) -> usize;$/;"	P	interface:Read
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn bytes(mut self, yes: bool) -> Self {$/;"	P	implementation:Compiler
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    bytes: bool,$/;"	m	struct:ExecBuilder
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    bytes: bool,$/;"	m	struct:Parsed
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn bytes(mut self, yes: bool) -> Self {$/;"	P	implementation:ExecBuilder
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^pub mod bytes {$/;"	n
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    c: &'a mut Compiler,$/;"	m	struct:CompileClass
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c(&mut self, expr: &Hir) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    macro_rules! c {$/;"	M	module:tests
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    c: Char,$/;"	m	struct:InputAt
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub c: char,$/;"	m	struct:InstChar
c_alternate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_alternate(&mut self, exprs: &[Hir]) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_byte(&mut self, b: u8) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_capture	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_capture(&mut self, first_slot: usize, expr: &Hir) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_char(&mut self, c: char) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_class	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_class(&mut self, ranges: &[hir::ClassUnicodeRange]) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_class_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_class_bytes($/;"	P	implementation:Compiler
c_concat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_concat<'a, I>(&mut self, exprs: I) -> ResultOrEmpty$/;"	P	implementation:Compiler
c_dotstar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_dotstar(&mut self) -> Result {$/;"	P	implementation:Compiler
c_empty_look	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_empty_look(&mut self, look: EmptyLook) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_repeat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_repeat(&mut self, rep: &hir::Repetition) -> ResultOrEmpty {$/;"	P	implementation:Compiler
c_repeat_one_or_more	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_repeat_one_or_more($/;"	P	implementation:Compiler
c_repeat_range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_repeat_range($/;"	P	implementation:Compiler
c_repeat_range_min_or_more	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_repeat_range_min_or_more($/;"	P	implementation:Compiler
c_repeat_zero_or_more	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_repeat_zero_or_more($/;"	P	implementation:Compiler
c_repeat_zero_or_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_repeat_zero_or_one($/;"	P	implementation:Compiler
c_utf8_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_utf8_seq(&mut self, seq: &Utf8Sequence) -> Result {$/;"	P	implementation:CompileClass
c_utf8_seq_	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn c_utf8_seq_<'r, I>(&mut self, seq: I) -> Result$/;"	P	implementation:CompileClass
cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    cache: &'a mut CacheInner,$/;"	m	struct:Fsm
cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    cache: PoolGuard<'c, ProgramCache>,$/;"	m	struct:ExecNoSync
cached	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod cached;$/;"	n
cached_float80	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod cached_float80;$/;"	n
cached_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn cached_state($/;"	P	implementation:Fsm
cached_state_key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn cached_state_key($/;"	P	implementation:Fsm
can_exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^pub fn can_exec(insts: &Program) -> bool {$/;"	f
cap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    cap: Ref<'a>,$/;"	m	struct:CaptureRef
capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:SparseSet
caps	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    caps: Vec<Slot>,$/;"	m	struct:Threads
caps	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn caps(&mut self, pc: usize) -> &mut [Option<usize>] {$/;"	P	implementation:Threads
caps	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    caps: &'c Captures<'t>,$/;"	m	struct:SubCaptureMatches
caps	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    caps: &'c Captures<'t>,$/;"	m	struct:SubCaptureMatches
capture_locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn capture_locations(&self) -> CaptureLocations {$/;"	P	implementation:Regex
capture_locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn capture_locations(&self) -> CaptureLocations {$/;"	P	implementation:Regex
capture_name_idx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    capture_name_idx: HashMap<String, usize>,$/;"	m	struct:Compiler
capture_name_idx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn capture_name_idx(&self) -> &Arc<HashMap<String, usize>> {$/;"	P	implementation:Exec
capture_name_idx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn capture_name_idx(&self) -> &Arc<HashMap<String, usize>> {$/;"	P	implementation:ExecNoSync
capture_name_idx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn capture_name_idx(&self) -> &Arc<HashMap<String, usize>> {$/;"	P	implementation:ExecNoSyncStr
capture_name_idx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub capture_name_idx: Arc<HashMap<String, usize>>,$/;"	m	struct:Program
capture_names	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn capture_names(&self) -> &[Option<String>] {$/;"	P	implementation:Exec
capture_names	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn capture_names(&self) -> CaptureNames<'_> {$/;"	P	implementation:Regex
capture_names	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn capture_names(&self) -> CaptureNames<'_> {$/;"	P	implementation:Regex
captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub captures: Vec<Option<String>>,$/;"	m	struct:Program
captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn captures<'t>(&self, text: &'t [u8]) -> Option<Captures<'t>> {$/;"	P	implementation:Regex
captures	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn captures<'t>(&self, text: &'t str) -> Option<Captures<'t>> {$/;"	P	implementation:Regex
captures_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn captures_iter<'r, 't>($/;"	P	implementation:Regex
captures_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn captures_iter(self, text: &Self::Text) -> CaptureMatches<'_, Self> {$/;"	P	interface:RegularExpression
captures_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn captures_iter<'r, 't>($/;"	P	implementation:Regex
captures_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn captures_len(&self) -> usize {$/;"	P	implementation:Regex
captures_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn captures_len(&self) -> usize {$/;"	P	implementation:Regex
captures_nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn captures_nfa($/;"	P	implementation:ExecNoSync
captures_nfa_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn captures_nfa_type($/;"	P	implementation:ExecNoSync
captures_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn captures_read<'t>($/;"	P	implementation:Regex
captures_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn captures_read<'t>($/;"	P	implementation:Regex
captures_read_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn captures_read_at($/;"	P	implementation:ExecNoSync
captures_read_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn captures_read_at($/;"	P	implementation:ExecNoSyncStr
captures_read_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn captures_read_at<'t>($/;"	P	implementation:Regex
captures_read_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn captures_read_at($/;"	P	interface:RegularExpression
captures_read_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn captures_read_at<'t>($/;"	P	implementation:Regex
case_insensitive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub case_insensitive: bool,$/;"	m	struct:RegexOptions
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn cell(self) -> CellStruct {$/;"	P	implementation:CellStruct
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn cell(self) -> CellStruct {$/;"	f
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn cell(self) -> CellStruct;$/;"	P	interface:Cell
cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod cell;$/;"	n
ch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    ch: Option<u8>,$/;"	m	struct:IoRead
char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn char(&self) -> Char {$/;"	P	implementation:InputAt
char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl PartialEq<Char> for char {$/;"	c
char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^impl PartialOrd<Char> for char {$/;"	c
char_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    char_len: usize,$/;"	m	struct:Memmem
char_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn char_len(&self) -> usize {$/;"	P	implementation:Memmem
char_len_lossy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^fn char_len_lossy(bytes: &[u8]) -> usize {$/;"	f
check_recursion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^macro_rules! check_recursion {$/;"	M
check_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn check_size(&self) -> result::Result<(), Error> {$/;"	P	implementation:Compiler
choose_dfa_match_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn choose_dfa_match_type(&self) -> Option<MatchType> {$/;"	P	implementation:ExecReadOnly
choose_literal_match_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn choose_literal_match_type(&self) -> Option<MatchType> {$/;"	P	implementation:ExecReadOnly
choose_match_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn choose_match_type(&self, hint: Option<MatchType>) -> MatchType {$/;"	P	implementation:ExecReadOnly
classify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn classify(&self) -> Category {$/;"	P	implementation:Error
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    fn clear(&mut self) {$/;"	P	implementation:Bounded
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn clear(&mut self) {$/;"	P	implementation:SuffixCache
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn clear(&mut self) {$/;"	P	implementation:StateMap
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn clear(&mut self) {$/;"	P	implementation:Transitions
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:SparseSet
clear	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Map
clear_cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn clear_cache(&mut self) -> bool {$/;"	P	implementation:Fsm
clear_cache_and_save	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn clear_cache_and_save($/;"	P	implementation:Fsm
client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^mod client;$/;"	n
client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    client: Option<Client>,$/;"	m	struct:RequestBuilder
client_tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^mod client_tests {$/;"	n
clist	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    clist: Threads,$/;"	m	struct:Cache
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn clone(&self) -> Exec {$/;"	P	implementation:Exec
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Map
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Box
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Client
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Next
code	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    code: ErrorCode,$/;"	m	struct:ErrorImpl
col	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    col: usize,$/;"	m	struct:LineColIterator
col	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    pub fn col(&self) -> usize {$/;"	f
collect_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn collect_str<T>(self, value: &T) -> Result<()>$/;"	f
collect_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> Result<String>$/;"	P	implementation:MapKeySerializer
collect_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> Result<Value>$/;"	P	implementation:Serializer
color_choice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    color_choice: ColorChoice,$/;"	m	struct:TableStruct
color_choice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn color_choice(mut self, color_choice: ColorChoice) -> Self {$/;"	P	implementation:TableStruct
color_spec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn color_spec(&self) -> ColorSpec {$/;"	P	implementation:CellStruct
color_spec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    pub(crate) fn color_spec(&self) -> ColorSpec {$/;"	P	implementation:StyleStruct
color_spec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn color_spec(&self) -> ColorSpec {$/;"	P	implementation:TableStruct
column	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn column(mut self, column: Option<VerticalLine>) -> Self {$/;"	P	implementation:SeparatorBuilder
column	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    column: usize,$/;"	m	struct:ErrorImpl
column	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn column(&self) -> usize {$/;"	P	implementation:Error
column	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    pub column: usize,$/;"	m	struct:Position
compare	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn compare(&self, y: &Self) -> cmp::Ordering {$/;"	P	interface:Math
compare	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn compare(x: &[Limb], y: &[Limb]) -> cmp::Ordering {$/;"	f	module:large
compile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn compile(mut self) -> Result {$/;"	P	implementation:CompileClass
compile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn compile(mut self, exprs: &[Hir]) -> result::Result<Program, Error> {$/;"	P	implementation:Compiler
compile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod compile;$/;"	n
compile_finish	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn compile_finish(mut self) -> result::Result<Program, Error> {$/;"	P	implementation:Compiler
compile_many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn compile_many($/;"	P	implementation:Compiler
compile_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn compile_one(mut self, expr: &Hir) -> result::Result<Program, Error> {$/;"	P	implementation:Compiler
compiled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    compiled: Program,$/;"	m	struct:Compiler
compiled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    compiled: StateMap,$/;"	m	struct:CacheInner
complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    complete: bool,$/;"	m	struct:LiteralSearcher
complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    complete: bool,$/;"	m	struct:SingleByteSet
complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn complete(&self) -> bool {$/;"	P	implementation:LiteralSearcher
complete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn complete(&self) -> bool {$/;"	P	implementation:imp::LiteralSearcher
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn connect(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
connect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn connect(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
consume	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn consume(mut self: Pin<&mut Self>, amt: usize) {$/;"	P	implementation:Response
contains	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn contains(&self, value: usize) -> bool {$/;"	P	implementation:SparseSet
contains_key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn contains_key<Q>(&self, key: &Q) -> bool$/;"	P	implementation:Map
content_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn content_type(&self) -> Option<Mime> {$/;"	P	implementation:Request
content_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn content_type(mut self, content_type: impl Into<Mime>) -> Self {$/;"	P	implementation:RequestBuilder
content_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn content_type(&self) -> Option<Mime> {$/;"	P	implementation:Response
continue_past_first_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn continue_past_first_match(&self) -> bool {$/;"	P	implementation:Fsm
core	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^    mod core {$/;"	n	module:lib
count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn count(self) -> usize {$/;"	P	implementation:CaptureNames
count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn count(self) -> usize {$/;"	P	implementation:CaptureNames
create	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    create: CreateFn<T>,$/;"	m	struct:Pool
csv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod csv;$/;"	n
custom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn custom<T: Display>(msg: T) -> Error {$/;"	P	implementation:Error
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    data: Vec<String>,$/;"	m	struct:CellStruct
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    data: &'a [u8],$/;"	m	struct:InstPtrs
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    data: Arc<[u8]>,$/;"	m	struct:State
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bignum.rs	/^    fn data(&self) -> &Vec<Limb> {$/;"	P	implementation:Bigint
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn data(&self) -> &Vec<Limb>;$/;"	P	interface:Math
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    data: &'a str,$/;"	m	struct:StrRead
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub data: Vec<u8>,$/;"	m	struct:DecodeError
data_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bignum.rs	/^    fn data_mut(&mut self) -> &mut Vec<Limb> {$/;"	P	implementation:Bigint
data_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn data_mut(&mut self) -> &mut Vec<Limb>;$/;"	P	interface:Math
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:MapAccess
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:MapKey
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:SeqAccess
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:UnitVariantAccess
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    de: &'a mut Deserializer<R>,$/;"	m	struct:VariantAccess
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    de: Deserializer<R>,$/;"	m	struct:StreamDeserializer
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^pub mod de;$/;"	n
de	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^mod de;$/;"	n
decode_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^fn decode_body(bytes: Vec<u8>, content_encoding: Option<&str>) -> Result<String, Error> {$/;"	f
decode_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^fn decode_body(mut bytes: Vec<u8>, content_encoding: Option<&str>) -> Result<String, Error> {$/;"	f
decode_hex_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16> {$/;"	P	implementation:SliceRead
decode_hex_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16> {$/;"	P	implementation:StrRead
decode_hex_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16> {$/;"	f
decode_hex_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16>;$/;"	P	interface:Read
decode_hex_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^fn decode_hex_val(val: u8) -> Option<u16> {$/;"	f
decode_last_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^pub fn decode_last_utf8(src: &[u8]) -> Option<(char, usize)> {$/;"	f
decode_tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^mod decode_tests {$/;"	n
decode_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^pub fn decode_utf8(src: &[u8]) -> Option<(char, usize)> {$/;"	f
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn default() -> Self {$/;"	P	implementation:Align
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn default() -> Self {$/;"	P	implementation:Justify
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn default() -> Self {$/;"	P	implementation:Border
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn default() -> Self {$/;"	P	implementation:HorizontalLine
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn default() -> Self {$/;"	P	implementation:Separator
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn default() -> Self {$/;"	P	implementation:VerticalLine
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    fn default() -> Self {$/;"	P	implementation:RegexOptions
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bignum.rs	/^    fn default() -> Self {$/;"	P	implementation:Bigint
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn default() -> Self {$/;"	P	implementation:Map
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn default() -> Self {$/;"	P	implementation:Box
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    fn default() -> Value {$/;"	P	implementation:Value
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    fn default() -> Self {$/;"	P	implementation:Client
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^    fn default() -> Self {$/;"	P	implementation:Redirect
default_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn default_utf8() {$/;"	f	module:decode_tests
define_builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^macro_rules! define_builder {$/;"	M
define_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_set.rs	/^macro_rules! define_set {$/;"	M
define_set_builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^macro_rules! define_set_builder {$/;"	M
delegate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    delegate: SliceRead<'a>,$/;"	m	struct:StrRead
delegate_iterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^macro_rules! delegate_iterator {$/;"	M
delete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn delete(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
delete	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn delete(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
dense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    dense: Vec<SuffixCacheEntry>,$/;"	m	struct:SuffixCache
dense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    dense: Vec<u8>,$/;"	m	struct:SingleByteSet
dense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    dense: Vec<usize>,$/;"	m	struct:SparseSet
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn deref(&self) -> &[u8] {$/;"	P	implementation:ByteInput
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn deref(&self) -> &[u8] {$/;"	P	implementation:CharInput
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:Program
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:SparseSet
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn deref(&self) -> &Self::Target {$/;"	f
description	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Map
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Number, D::Error>$/;"	P	implementation:Number
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn deserialize<D>(deserializer: D) -> Result<NumberFromString, D::Error>$/;"	P	implementation:NumberFromString
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn deserialize<D>(deserializer: D) -> Result<NumberKey, D::Error>$/;"	P	implementation:NumberKey
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn deserialize<D>(deserializer: D) -> Result<RawKey, D::Error>$/;"	P	implementation:RawKey
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Box
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:RawValue
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:BoxedFromString
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:ReferenceFromString
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Value, D::Error>$/;"	P	implementation:Value
deserialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:KeyClassifier
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:NumberFieldDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^macro_rules! deserialize_any {$/;"	M
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:RawKeyDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:SeqDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:SeqRefDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:BorrowedCowStrDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:MapDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:MapKeyDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:MapRefDeserializer
deserialize_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_byte_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_byte_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_byte_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_enum	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:Deserializer
deserialize_enum	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:BorrowedCowStrDeserializer
deserialize_enum	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:MapKeyDeserializer
deserialize_enum	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_enum<V>($/;"	P	implementation:Value
deserialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_identifier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_identifier	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_ignored_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_ignored_any	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_integer_key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^macro_rules! deserialize_integer_key {$/;"	M
deserialize_integer_key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^macro_rules! deserialize_integer_key {$/;"	M
deserialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_newtype_struct<V>(self, _name: &'static str, visitor: V) -> Result<V::Value>$/;"	f
deserialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_newtype_struct<V>(self, name: &str, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	implementation:MapKeyDeserializer
deserialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	implementation:Value
deserialize_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_number<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^macro_rules! deserialize_number {$/;"	M
deserialize_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^macro_rules! deserialize_number {$/;"	M
deserialize_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^macro_rules! deserialize_number {$/;"	M
deserialize_option	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_option	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value>$/;"	f
deserialize_option	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:MapKeyDeserializer
deserialize_option	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_raw_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_raw_value<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_struct<V>($/;"	P	implementation:Deserializer
deserialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_struct<V>($/;"	P	implementation:Value
deserialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	implementation:Deserializer
deserialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	implementation:Value
deserialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:Value
deserialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn deserialize_unit_struct<V>(self, _name: &'static str, visitor: V) -> Result<V::Value>$/;"	P	implementation:Deserializer
deserialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn deserialize_unit_struct<V>(self, _name: &'static str, visitor: V) -> Result<V::Value, Err/;"	P	implementation:Value
deserialize_value_ref_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^macro_rules! deserialize_value_ref_number {$/;"	M
dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn dfa(mut self, yes: bool) -> Self {$/;"	P	implementation:Compiler
dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    dfa: Program,$/;"	m	struct:ExecReadOnly
dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub dfa: dfa::Cache,$/;"	m	struct:ProgramCacheInner
dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod dfa;$/;"	n
dfa_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    dfa_reverse: Program,$/;"	m	struct:ExecReadOnly
dfa_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub dfa_reverse: dfa::Cache,$/;"	m	struct:ProgramCacheInner
dfa_size_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub dfa_size_limit: usize,$/;"	m	struct:Program
dfa_size_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub dfa_size_limit: usize,$/;"	m	struct:RegexOptions
digit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod digit;$/;"	n
dimmed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn dimmed(mut self, dimmed: bool) -> Self {$/;"	P	implementation:CellStruct
dimmed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn dimmed(mut self, dimmed: bool) -> Self {$/;"	P	implementation:StyleStruct
dimmed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn dimmed(self, dimmed: bool) -> Self;$/;"	P	interface:Style
dimmed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn dimmed(mut self, dimmed: bool) -> Self {$/;"	P	implementation:TableStruct
disable_recursion_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    disable_recursion_limit: bool,$/;"	m	struct:Deserializer
disable_recursion_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn disable_recursion_limit(&mut self) {$/;"	P	implementation:Deserializer
discard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn discard(&mut self) {$/;"	P	implementation:SliceRead
discard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn discard(&mut self) {$/;"	P	implementation:StrRead
discard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn discard(&mut self) {$/;"	f
discard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn discard(&mut self);$/;"	P	interface:Read
display_width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn display_width(text: &str) -> usize {$/;"	f
dot_matches_new_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub dot_matches_new_line: bool,$/;"	m	struct:RegexOptions
downard	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^fn downard(_: &mut ExtendedFloat, _: bool) {}$/;"	f
drop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn drop(&mut self) {$/;"	P	implementation:PoolGuard
dup_one	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn dup_one(self) -> (Self, Self) {$/;"	P	implementation:Hole
eat_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn eat_char(&mut self) {$/;"	P	implementation:Deserializer
elapsed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    elapsed: &'a str,$/;"	m	struct:ResponsePairs
empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn empty() -> Self {$/;"	P	implementation:LiteralSearcher
empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn empty() -> Self {$/;"	P	implementation:imp::LiteralSearcher
encoding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub encoding: String,$/;"	m	struct:DecodeError
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    end: u8,$/;"	m	struct:SuffixCacheKey
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    end: bool,$/;"	m	struct:EmptyFlags
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    end: usize,$/;"	m	struct:CaptureRef
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub end: u8,$/;"	m	struct:InstBytes
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    end: usize,$/;"	m	struct:Match
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn end(&self) -> usize {$/;"	P	implementation:Match
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    end: usize,$/;"	m	struct:Match
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn end(&self) -> usize {$/;"	P	implementation:Match
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn end(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn end(self) -> Result<()> {$/;"	f
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeMap
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeStructVariant
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeTupleVariant
end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn end(self) -> Result<Value> {$/;"	P	implementation:SerializeVec
end_bound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^                fn end_bound(&self) -> Bound<&Q> {$/;"	P	implementation:Map::remove_entry::Key
end_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    end_line: bool,$/;"	m	struct:EmptyFlags
end_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn end_map(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
end_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:SliceRead
end_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	implementation:StrRead
end_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	P	interface:Read
end_raw_buffering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>$/;"	f
end_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn end_seq(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
end_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>$/;"	P	interface:Formatter
endpoint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    endpoint: &'a (dyn (Fn(Request, Client) -> BoxFuture<'static, Result<Response>>)$/;"	m	struct:Next
entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    entry: InstPtr,$/;"	m	struct:Patch
entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn entry<S>(&mut self, key: S) -> Entry$/;"	P	implementation:Map
eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn eof() -> Self {$/;"	P	implementation:Byte
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn eq(&self, other: &Char) -> bool {$/;"	P	implementation:char
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn eq(&self, other: &char) -> bool {$/;"	P	implementation:Char
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	P	implementation:Map
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^    fn eq(&self, other: &&str) -> bool {$/;"	P	implementation:Value
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^    fn eq(&self, other: &String) -> bool {$/;"	P	implementation:Value
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^    fn eq(&self, other: &Value) -> bool {$/;"	P	implementation:String
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^    fn eq(&self, other: &Value) -> bool {$/;"	P	implementation:str
eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^    fn eq(&self, other: &str) -> bool {$/;"	P	implementation:Value
eq_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^fn eq_bool(value: &Value, other: bool) -> bool {$/;"	f
eq_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^fn eq_f64(value: &Value, other: f64) -> bool {$/;"	f
eq_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^fn eq_i64(value: &Value, other: i64) -> bool {$/;"	f
eq_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^fn eq_str(value: &Value, other: &str) -> bool {$/;"	f
eq_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^fn eq_u64(value: &Value, other: u64) -> bool {$/;"	f
err	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    err: Box<ErrorImpl>,$/;"	m	struct:Error
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod error;$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn error(&self, reason: ErrorCode) -> Error {$/;"	P	implementation:Deserializer
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^pub mod error;$/;"	n
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^fn error<'de, R, T>(read: &R, reason: ErrorCode) -> Result<T>$/;"	f
error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^            error: Option<io::Error>,$/;"	m	struct:collect_str::Adapter
error_halfscale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^    fn error_halfscale() -> u32 {$/;"	P	implementation:u64
error_halfscale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^    fn error_halfscale() -> u32;$/;"	P	interface:FloatErrors
error_is_accurate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^    fn error_is_accurate<F: Float>(count: u32, fp: &ExtendedFloat) -> bool {$/;"	P	implementation:u64
error_is_accurate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^    fn error_is_accurate<F: Float>(count: u32, fp: &ExtendedFloat) -> bool;$/;"	P	interface:FloatErrors
error_scale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^    fn error_scale() -> u32 {$/;"	P	implementation:u64
error_scale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^    fn error_scale() -> u32;$/;"	P	interface:FloatErrors
errors	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod errors;$/;"	n
escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^pub fn escape(text: &str) -> String {$/;"	f
escape_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^        fn escape_byte(byte: u8) -> String {$/;"	f	method:CapturesDebug::fmt
escape_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^        fn escape_bytes(bytes: &[u8]) -> String {$/;"	f	method:CapturesDebug::fmt
euc_kr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn euc_kr() {$/;"	f	module:decode_tests
exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    pub fn exec($/;"	P	implementation:Bounded
exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod exec;$/;"	n
exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    pub fn exec($/;"	P	implementation:Fsm
exec_	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    fn exec_(&mut self, mut at: InputAt, end: usize) -> bool {$/;"	P	implementation:Bounded
exec_	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn exec_($/;"	P	implementation:Fsm
exec_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn exec_at($/;"	P	implementation:Fsm
exec_at_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn exec_at_reverse($/;"	P	implementation:Fsm
exec_backtrack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn exec_backtrack($/;"	P	implementation:ExecNoSync
exec_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn exec_byte($/;"	P	implementation:Fsm
exec_dfa_reverse_suffix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn exec_dfa_reverse_suffix($/;"	P	implementation:ExecNoSync
exec_nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn exec_nfa($/;"	P	implementation:ExecNoSync
exec_pikevm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn exec_pikevm($/;"	P	implementation:ExecNoSync
exp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub exp: &'static [i32],$/;"	m	struct:ExtendedFloatArray
exp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub exp: i32,$/;"	m	struct:ExtendedFloat
expand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod expand;$/;"	n
expand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {$/;"	P	implementation:Captures
expand	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn expand(&self, replacement: &str, dst: &mut String) {$/;"	P	implementation:Captures
expand_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^pub fn expand_bytes($/;"	f
expand_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^pub fn expand_str($/;"	f
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Map::deserialize::Visitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Number::deserialize::NumberVisitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:NumberFromString::deserialize::Visitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:NumberKey::deserialize::FieldVisitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Box::deserialize::BoxedVisitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawKey::deserialize::FieldVisitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawValue::deserialize::ReferenceVisitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoxedFromString
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ReferenceFromString
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Value::deserialize::ValueVisitor
expecting	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:KeyClassifier
exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod exponent;$/;"	n
exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn exponent(self) -> i32 {$/;"	P	interface:Float
exponent_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn exponent_limit() -> (i32, i32) {$/;"	P	implementation:f32
exponent_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn exponent_limit() -> (i32, i32) {$/;"	P	implementation:f64
exponent_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn exponent_limit() -> (i32, i32);$/;"	P	interface:Float
exprs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    exprs: Vec<Hir>,$/;"	m	struct:Parsed
ext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn ext<T: Send + Sync + 'static>(&self) -> Option<&T> {$/;"	P	implementation:Request
ext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn ext<T: Send + Sync + 'static>(&self) -> Option<&T> {$/;"	P	implementation:Response
extend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn extend<T>(&mut self, iter: T)$/;"	P	implementation:Map
extra_inst_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    extra_inst_bytes: usize,$/;"	m	struct:Compiler
f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^impl Float for f32 {$/;"	c
f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^impl Float for f64 {$/;"	c
f64_from_parts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn f64_from_parts($/;"	P	implementation:Deserializer
f64_from_parts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn f64_from_parts(&mut self, positive: bool, significand: u64, exponent: i32) -> Result<f64>/;"	P	implementation:Deserializer
f64_long_from_parts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn f64_long_from_parts($/;"	P	implementation:Deserializer
failed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    failed: bool,$/;"	m	struct:StreamDeserializer
fallback_path	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/algorithm.rs	/^pub(crate) fn fallback_path<F>($/;"	f
fast_path	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/algorithm.rs	/^pub(crate) fn fast_path<F>(mantissa: u64, exponent: i32) -> Option<F>$/;"	f
features_check	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod features_check;$/;"	n
fill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fill(&mut self, goto: InstPtr) {$/;"	P	implementation:MaybeInst
fill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fill(&mut self, hole: Hole, goto: InstPtr) {$/;"	P	implementation:Compiler
fill	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fill(&self, goto: InstPtr) -> Inst {$/;"	P	implementation:InstHole
fill_split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fill_split($/;"	P	implementation:Compiler
fill_split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fill_split(&mut self, goto1: InstPtr, goto2: InstPtr) {$/;"	P	implementation:MaybeInst
fill_to_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fill_to_next(&mut self, hole: Hole) {$/;"	P	implementation:Compiler
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    macro_rules! find {$/;"	M	module:tests
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn find(&self, text: &[u8]) -> Option<usize> {$/;"	P	implementation:SingleByteSet
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn find(&self, haystack: &[u8]) -> Option<(usize, usize)> {$/;"	P	implementation:LiteralSearcher
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn find(&self, haystack: &[u8]) -> Option<usize> {$/;"	P	implementation:Memmem
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn find(&self, _: &[u8]) -> Option<(usize, usize)> {$/;"	P	implementation:imp::LiteralSearcher
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn find<'t>(&self, text: &'t [u8]) -> Option<Match<'t>> {$/;"	P	implementation:Regex
find	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn find<'t>(&self, text: &'t str) -> Option<Match<'t>> {$/;"	P	implementation:Regex
find_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_at(&self, text: &[u8], start: usize) -> Option<(usize, usize)> {$/;"	P	implementation:ExecNoSync
find_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {$/;"	P	implementation:ExecNoSyncStr
find_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn find_at<'t>($/;"	P	implementation:Regex
find_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn find_at($/;"	P	interface:RegularExpression
find_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn find_at<'t>($/;"	P	implementation:Regex
find_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/find_byte.rs	/^pub fn find_byte(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f
find_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod find_byte;$/;"	n
find_cap_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^fn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {$/;"	f
find_cap_ref_braced	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^fn find_cap_ref_braced(rep: &[u8], mut i: usize) -> Option<CaptureRef<'_>> {$/;"	f
find_dfa_anchored_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_dfa_anchored_reverse($/;"	P	implementation:ExecNoSync
find_dfa_forward	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_dfa_forward($/;"	P	implementation:ExecNoSync
find_dfa_reverse_suffix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_dfa_reverse_suffix($/;"	P	implementation:ExecNoSync
find_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn find_end(&self, haystack: &[u8]) -> Option<(usize, usize)> {$/;"	P	implementation:LiteralSearcher
find_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn find_end(&self, _: &[u8]) -> Option<(usize, usize)> {$/;"	P	implementation:imp::LiteralSearcher
find_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn find_iter<'r, 't>(&'r self, text: &'t [u8]) -> Matches<'r, 't> {$/;"	P	implementation:Regex
find_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn find_iter(self, text: &Self::Text) -> Matches<'_, Self> {$/;"	P	interface:RegularExpression
find_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> Matches<'r, 't> {$/;"	P	implementation:Regex
find_literals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_literals($/;"	P	implementation:ExecNoSync
find_nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn find_nfa($/;"	P	implementation:ExecNoSync
find_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn find_start(&self, haystack: &[u8]) -> Option<(usize, usize)> {$/;"	P	implementation:LiteralSearcher
find_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn find_start(&self, _: &[u8]) -> Option<(usize, usize)> {$/;"	P	implementation:imp::LiteralSearcher
finder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    finder: memmem::Finder<'static>,$/;"	m	struct:Memmem
finder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    finder: Matches<'r, 't>,$/;"	m	struct:Split
finder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    finder: Matches<'r, 't>,$/;"	m	struct:Split
first	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    first: bool,$/;"	m	struct:MapAccess
first	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    first: bool,$/;"	m	struct:SeqAccess
fix_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn fix_position(&self, err: Error) -> Error {$/;"	P	implementation:Deserializer
fix_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub(crate) fn fix_position<F>(self, f: F) -> Self$/;"	P	implementation:Error
flags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn flags(&self) -> StateFlags {$/;"	P	implementation:State
float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod float;$/;"	n
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn flush(&mut self) -> Result<()> {$/;"	P	implementation:Vec
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn flush(&mut self) -> Result<()> {$/;"	P	implementation:W
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn flush(&mut self) -> Result<()>;$/;"	P	interface:Write
flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^            fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Value::fmt::WriterFormatter
flush_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    flush_count: u64,$/;"	m	struct:CacheInner
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ByteClassSet
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:State
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:StateFlags
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Transitions
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TransitionsRow
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Char
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {$/;"	P	implementation:Pool
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Program
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Captures
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:CapturesDebug
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Regex
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Captures
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:CapturesDebug
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Regex
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SparseSet
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ErrorCode
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ErrorImpl
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn fmt(&self, _formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Map
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Number
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawValue
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:RawValue
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Type
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Value
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Value
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Client
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Request
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:RequestBuilder
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:DecodeError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Response
follow_epsilons	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn follow_epsilons($/;"	P	implementation:Fsm
foreground_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn foreground_color(mut self, foreground_color: Option<Color>) -> Self {$/;"	P	implementation:CellStruct
foreground_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn foreground_color(mut self, foreground_color: Option<Color>) -> Self {$/;"	P	implementation:StyleStruct
foreground_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn foreground_color(self, foreground_color: Option<Color>) -> Self;$/;"	P	interface:Style
foreground_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn foreground_color(mut self, foreground_color: Option<Color>) -> Self {$/;"	P	implementation:TableStruct
format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    format: CellFormat,$/;"	m	struct:CellStruct
format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^pub mod format;$/;"	n
format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    format: TableFormat,$/;"	m	struct:TableStruct
formatter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^            formatter: &'ser mut F,$/;"	m	struct:collect_str::Adapter
formatter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    formatter: F,$/;"	m	struct:Serializer
forward	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    pub fn forward($/;"	P	implementation:Fsm
forward_many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    pub fn forward_many($/;"	P	implementation:Fsm
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn from(row_dimension: RowDimension) -> Self {$/;"	P	implementation:Vec
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn from(table_dimension: TableDimension) -> Self {$/;"	P	implementation:Vec
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    fn from(x: &'a str) -> Ref<'a> {$/;"	P	implementation:Ref
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^    fn from(x: usize) -> Ref<'static> {$/;"	P	implementation:Ref
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn from(c: Option<char>) -> Char {$/;"	P	implementation:Char
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn from(c: char) -> Char {$/;"	P	implementation:Char
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn from(exec: Exec) -> Regex {$/;"	P	implementation:Regex
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn from(m: Match<'t>) -> Range<usize> {$/;"	P	implementation:Range
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn from(exec: Exec) -> Regex {$/;"	P	implementation:Regex
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn from(m: Match<'t>) -> &'t str {$/;"	P	implementation:str
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn from(m: Match<'t>) -> Range<usize> {$/;"	P	implementation:Range
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn from(j: Error) -> Self {$/;"	P	implementation:Error
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn from(value: ParserNumber) -> Self {$/;"	P	implementation:Number
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from((): ()) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: &'a [T]) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: &str) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: Cow<'a, str>) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: Map<String, Value>) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: Number) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: String) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: Vec<T>) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: bool) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: f32) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from(f: f64) -> Self {$/;"	P	implementation:Value
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^mod from;$/;"	n
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn from(req: http::Request) -> Self {$/;"	P	implementation:Request
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    fn from(builder: RequestBuilder) -> Request {$/;"	P	implementation:Request
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn from(response: http::Response) -> Self {$/;"	P	implementation:Response
from_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn from_bits(u: Self::Unsigned) -> Self;$/;"	P	interface:Float
from_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn from_bits(u: u32) -> f32 {$/;"	P	implementation:f32
from_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn from_bits(u: u64) -> f64 {$/;"	P	implementation:f64
from_borrowed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn from_borrowed(json: &str) -> &Self {$/;"	P	implementation:RawValue
from_escape_table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {$/;"	P	implementation:CharEscape
from_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn from_f64(f: f64) -> Option<Number> {$/;"	P	implementation:Number
from_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub fn from_float<F: Float>(f: F) -> ExtendedFloat {$/;"	P	implementation:ExtendedFloat
from_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^pub(crate) fn from_float<F>(f: F) -> ExtendedFloat$/;"	f
from_inst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    from_inst: InstPtr,$/;"	m	struct:SuffixCacheKey
from_integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^macro_rules! from_integer {$/;"	M
from_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn from_iter<T>(iter: T) -> Self$/;"	P	implementation:Map
from_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from_iter<I: IntoIterator<Item = (K, V)>>(iter: I) -> Self {$/;"	P	implementation:Value
from_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/from.rs	/^    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {$/;"	P	implementation:Value
from_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn from_owned(json: Box<str>) -> Box<Self> {$/;"	P	implementation:RawValue
from_reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn from_reader(reader: R) -> Self {$/;"	f
from_reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^pub fn from_reader<R, T>(rdr: R) -> Result<T>$/;"	f
from_slice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn from_slice(bytes: &'a [u8]) -> Self {$/;"	P	implementation:Deserializer
from_slice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^pub fn from_slice<'a, T>(v: &'a [u8]) -> Result<T>$/;"	f
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn from_str(s: &str) -> Result<Regex, Error> {$/;"	P	implementation:Regex
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn from_str(s: &str) -> Result<Regex, Error> {$/;"	P	implementation:Regex
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn from_str(s: &str) -> result::Result<Self, Self::Err> {$/;"	P	implementation:Number
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn from_str(s: &'a str) -> Self {$/;"	P	implementation:Deserializer
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^pub fn from_str<'a, T>(s: &'a str) -> Result<T>$/;"	f
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn from_str(s: &str) -> Result<Value, Error> {$/;"	P	implementation:Value
from_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    pub fn from_string(json: String) -> Result<Box<Self>, Error> {$/;"	P	implementation:RawValue
from_string_unchecked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn from_string_unchecked(n: String) -> Self {$/;"	P	implementation:Number
from_trait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^fn from_trait<'de, R, T>(read: R) -> Result<T>$/;"	f
from_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn from_u64(x: u64) -> Self {$/;"	P	interface:Math
from_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^pub fn from_value<T>(value: Value) -> Result<T, Error>$/;"	f
full_byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn full_byte_classes() {$/;"	f	module:tests
fut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    fut: Option<BoxFuture<'static, Result<Response>>>,$/;"	m	struct:RequestBuilder
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn get(&mut self, key: SuffixCacheKey, pc: InstPtr) -> Option<InstPtr> {$/;"	P	implementation:SuffixCache
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    pub fn get(&self) -> PoolGuard<'_, T> {$/;"	P	implementation:Pool
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn get(&self, i: usize) -> Option<(usize, usize)> {$/;"	P	implementation:CaptureLocations
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn get(&self, i: usize) -> Option<Match<'t>> {$/;"	P	implementation:Captures
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn get(&self, i: usize) -> Option<(usize, usize)> {$/;"	P	implementation:CaptureLocations
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn get(&self, i: usize) -> Option<Match<'t>> {$/;"	P	implementation:Captures
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn get(&self) -> &Value {$/;"	P	implementation:OccupiedEntry
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn get<Q>(&self, key: &Q) -> Option<&Value>$/;"	P	implementation:Map
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    pub fn get(&self) -> &str {$/;"	P	implementation:RawValue
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn get<I: Index>(&self, index: I) -> Option<&Value> {$/;"	P	implementation:Value
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn get(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn get(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
get_extended_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub fn get_extended_float(&self, index: usize) -> ExtendedFloat {$/;"	P	implementation:ExtendedFloatArray
get_hhsh_str	/home/cht/Rust/spidder/src/main.rs	/^fn get_hhsh_str(hhsh: String) -> String {$/;"	f
get_large	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub fn get_large(&self, index: usize) -> ExtendedFloat {$/;"	P	implementation:ModeratePathPowers
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn get_mut(&mut self) -> &mut Value {$/;"	P	implementation:OccupiedEntry
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut Value>$/;"	P	implementation:Map
get_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn get_mut<I: Index>(&mut self, index: I) -> Option<&mut Value> {$/;"	P	implementation:Value
get_powers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    fn get_powers() -> &'static ModeratePathPowers {$/;"	P	implementation:ExtendedFloat
get_powers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    fn get_powers() -> &'static ModeratePathPowers;$/;"	P	interface:ModeratePathCache
get_powers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached_float80.rs	/^pub(crate) fn get_powers() -> &'static ModeratePathPowers {$/;"	f
get_ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn get_ptr(&self, state: &State) -> Option<StatePtr> {$/;"	P	implementation:StateMap
get_slow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn get_slow(&self, caller: usize, owner: usize) -> PoolGuard<'_, T> {$/;"	P	implementation:Pool
get_small	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub fn get_small(&self, index: usize) -> ExtendedFloat {$/;"	P	implementation:ModeratePathPowers
get_small_int	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub fn get_small_int(&self, index: usize) -> u64 {$/;"	P	implementation:ModeratePathPowers
get_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn get_state(&self, si: StatePtr) -> Option<&State> {$/;"	P	implementation:StateMap
goto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto: InstPtr,$/;"	m	struct:InstBytes
goto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto: InstPtr,$/;"	m	struct:InstChar
goto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto: InstPtr,$/;"	m	struct:InstEmptyLook
goto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto: InstPtr,$/;"	m	struct:InstRanges
goto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto: InstPtr,$/;"	m	struct:InstSave
goto1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto1: InstPtr,$/;"	m	struct:InstSplit
goto2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub goto2: InstPtr,$/;"	m	struct:InstSplit
greater_equal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn greater_equal(x: &[Limb], y: &[Limb]) -> bool {$/;"	f	module:large
guard_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn guard_owned(&self) -> PoolGuard<'_, T> {$/;"	P	implementation:Pool
guard_stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn guard_stack(&self, value: Box<T>) -> PoolGuard<'_, T> {$/;"	P	implementation:Pool
half_fill_split_goto1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn half_fill_split_goto1(&mut self, goto1: InstPtr) {$/;"	P	implementation:MaybeInst
half_fill_split_goto2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn half_fill_split_goto2(&mut self, goto2: InstPtr) {$/;"	P	implementation:MaybeInst
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    async fn handle($/;"	P	implementation:Logger
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    async fn handle($/;"	P	implementation:Logger
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    async fn handle(&self, req: Request, client: Client, next: Next<'_>) -> Result<Response> {$/;"	f
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    async fn handle(&self, req: Request, client: Client, next: Next<'_>) -> Result<Response>;$/;"	P	interface:Middleware
handle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^    async fn handle(&self, mut req: Request, client: Client, next: Next<'_>) -> Result<Response>/;"	P	implementation:Redirect
has_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn has_empty(&self) -> bool {$/;"	P	implementation:StateFlags
has_oibits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^        fn has_oibits<T: Send + Sync + UnwindSafe + RefUnwindSafe>() {}$/;"	f	function:tests::oibits
has_prefix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn has_prefix(&self) -> bool {$/;"	P	implementation:Fsm
has_unicode_word_boundary	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub has_unicode_word_boundary: bool,$/;"	m	struct:Program
has_visited	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    fn has_visited(&mut self, ip: InstPtr, at: InputAt) -> bool {$/;"	P	implementation:Bounded
hash	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn hash(&self, suffix: &SuffixCacheKey) -> usize {$/;"	P	implementation:SuffixCache
haystack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    fn haystack(&self) -> &'t str {$/;"	P	implementation:RegexSearcher
haystack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    haystack: &'t str,$/;"	m	struct:RegexSearcher
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn head(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
head	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn head(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn header(&self, key: impl Into<HeaderName>) -> Option<&HeaderValues> {$/;"	P	implementation:Request
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn header(mut self, key: impl Into<HeaderName>, value: impl ToHeaderValues) -> Self {$/;"	P	implementation:RequestBuilder
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn header(&self, name: impl Into<HeaderName>) -> Option<&HeaderValues> {$/;"	P	implementation:Response
header_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn header_mut(&mut self, name: impl Into<HeaderName>) -> Option<&mut HeaderValues> {$/;"	P	implementation:Request
header_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn header_mut(&mut self, name: impl Into<HeaderName>) -> Option<&mut HeaderValues> {$/;"	P	implementation:Response
header_names	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn header_names(&self) -> headers::Names<'_> {$/;"	P	implementation:Request
header_names	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn header_names(&self) -> headers::Names<'_> {$/;"	P	implementation:Response
header_values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn header_values(&self) -> headers::Values<'_> {$/;"	P	implementation:Request
header_values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn header_values(&self) -> headers::Values<'_> {$/;"	P	implementation:Response
hi64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64(&self) -> (u64, bool) {$/;"	P	interface:Hi64
hi64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64(&self) -> (u64, bool) {$/;"	P	interface:Math
hi64_1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_1(&self) -> (u64, bool) {$/;"	P	implementation:u32
hi64_1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_1(&self) -> (u64, bool) {$/;"	P	implementation:u64
hi64_1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_1(&self) -> (u64, bool);$/;"	P	interface:Hi64
hi64_2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_2(&self) -> (u64, bool) {$/;"	P	implementation:u32
hi64_2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_2(&self) -> (u64, bool) {$/;"	P	implementation:u64
hi64_2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_2(&self) -> (u64, bool);$/;"	P	interface:Hi64
hi64_3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_3(&self) -> (u64, bool) {$/;"	P	implementation:u32
hi64_3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_3(&self) -> (u64, bool) {$/;"	P	implementation:u64
hi64_3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn hi64_3(&self) -> (u64, bool);$/;"	P	interface:Hi64
hide_from_rustfmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/features_check/mod.rs	/^macro_rules! hide_from_rustfmt {$/;"	M
hole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    hole: Hole,$/;"	m	struct:Patch
http_client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    http_client: Arc<dyn HttpClient>,$/;"	m	struct:Client
iadd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn iadd(x: &mut Limb, y: Limb) -> bool {$/;"	f	module:scalar
iadd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn iadd(x: &mut Vec<Limb>, y: &[Limb]) {$/;"	f	module:large
iadd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn iadd(x: &mut Vec<Limb>, y: Limb) {$/;"	f	module:small
iadd_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn iadd_impl(x: &mut Vec<Limb>, y: &[Limb], xstart: usize) {$/;"	f	module:large
iadd_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn iadd_impl(x: &mut Vec<Limb>, y: Limb, xstart: usize) {$/;"	f	module:small
iadd_small	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn iadd_small(&mut self, y: Limb) {$/;"	P	interface:Math
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    id: usize,$/;"	m	struct:RequestPairs
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    id: usize,$/;"	m	struct:ResponsePairs
idx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    idx: usize,$/;"	m	struct:SubCapturesPosIter
if_checking_recursion_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^macro_rules! if_checking_recursion_limit {$/;"	M
ignore_decimal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn ignore_decimal(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^fn ignore_escape<'de, R>(read: &mut R) -> Result<()>$/;"	f
ignore_exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn ignore_exponent(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn ignore_integer(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()> {$/;"	P	implementation:SliceRead
ignore_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()> {$/;"	P	implementation:StrRead
ignore_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()> {$/;"	f
ignore_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn ignore_str(&mut self) -> Result<()>;$/;"	P	interface:Read
ignore_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn ignore_value(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
ignore_whitespace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub ignore_whitespace: bool,$/;"	m	struct:RegexOptions
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^        fn imp(_: &ExecReadOnly) -> Option<MatchType> {$/;"	f	method:ExecReadOnly::choose_dfa_match_type
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^        fn imp(_: &ExecReadOnly) -> Option<MatchType> {$/;"	f	method:ExecReadOnly::choose_literal_match_type
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^        fn imp(_: &ExecReadOnly, _: &[u8]) -> bool {$/;"	f	method:ExecNoSync::is_anchor_end_match
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^        fn imp(ro: &ExecReadOnly) -> Option<MatchType> {$/;"	f	method:ExecReadOnly::choose_dfa_match_type
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^        fn imp(ro: &ExecReadOnly) -> Option<MatchType> {$/;"	f	method:ExecReadOnly::choose_literal_match_type
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^        fn imp(ro: &ExecReadOnly, text: &[u8]) -> bool {$/;"	f	method:ExecNoSync::is_anchor_end_match
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/find_byte.rs	/^    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	function:find_byte
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^mod imp {$/;"	n
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^mod imp;$/;"	n
imp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/mod.rs	/^mod imp;$/;"	n
impl_from_signed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^macro_rules! impl_from_signed {$/;"	M
impl_from_unsigned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^macro_rules! impl_from_unsigned {$/;"	M
imul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub(crate) fn imul(&mut self, b: &ExtendedFloat) {$/;"	P	implementation:ExtendedFloat
imul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn imul(x: &mut Limb, y: Limb, carry: Limb) -> Limb {$/;"	f	module:scalar
imul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn imul(x: &mut Vec<Limb>, y: &[Limb]) {$/;"	f	module:large
imul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn imul(x: &mut Vec<Limb>, y: Limb) {$/;"	f	module:small
imul_pow10	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn imul_pow10(&mut self, n: u32) {$/;"	P	interface:Math
imul_pow2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn imul_pow2(&mut self, n: u32) {$/;"	P	interface:Math
imul_pow5	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn imul_pow5(&mut self, n: u32) {$/;"	P	interface:Math
imul_pow5	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn imul_pow5(x: &mut Vec<Limb>, n: u32) {$/;"	f	module:small
imul_small	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn imul_small(&mut self, y: Limb) {$/;"	P	interface:Math
indent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^fn indent<W>(wr: &mut W, n: usize, s: &[u8]) -> io::Result<()>$/;"	f	method:Formatter::write_char_escape
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn index(&self, i: usize) -> &[u8] {$/;"	P	implementation:Captures
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn index<'a>(&'a self, name: &'i str) -> &'a [u8] {$/;"	P	implementation:Captures
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn index(&self, i: usize) -> &str {$/;"	P	implementation:Captures
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn index<'a>(&'a self, name: &'i str) -> &'a str {$/;"	P	implementation:Captures
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn index(&self, index: &Q) -> &Value {$/;"	f
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    index: usize,$/;"	m	struct:SliceRead
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index(&self, index: I) -> &Value {$/;"	f
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^mod index;$/;"	n
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn index(&self, name: &str) -> &HeaderValues {$/;"	P	implementation:Request
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn index(&self, name: HeaderName) -> &HeaderValues {$/;"	P	implementation:Request
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn index(&self, name: &str) -> &HeaderValues {$/;"	P	implementation:Response
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn index(&self, name: HeaderName) -> &HeaderValues {$/;"	P	implementation:Response
index_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	P	implementation:String
index_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	P	implementation:str
index_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	P	implementation:usize
index_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {$/;"	f
index_into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value>;$/;"	P	interface:Index
index_into_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	P	implementation:String
index_into_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	P	implementation:str
index_into_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	P	implementation:usize
index_into_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {$/;"	f
index_into_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value>;$/;"	P	interface:Index
index_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn index_mut(&mut self, index: &Q) -> &mut Value {$/;"	f
index_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_mut(&mut self, index: I) -> &mut Value {$/;"	f
index_or_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	P	implementation:String
index_or_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	P	implementation:str
index_or_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	P	implementation:usize
index_or_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {$/;"	f
index_or_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value;$/;"	P	interface:Index
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    inner: CacheInner,$/;"	m	struct:Cache
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^            inner: &'a mut fmt::Formatter<'b>,$/;"	m	struct:Value::fmt::WriterFormatter
input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    input: I,$/;"	m	struct:Bounded
input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod input;$/;"	n
input	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    input: I,$/;"	m	struct:Fsm
insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn insert(&mut self, state: State, si: StatePtr) {$/;"	P	implementation:StateMap
insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn insert(&mut self, value: usize) {$/;"	P	implementation:SparseSet
insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn insert(&mut self, k: String, v: Value) -> Option<Value> {$/;"	P	implementation:Map
insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn insert(&mut self, value: Value) -> Value {$/;"	P	implementation:OccupiedEntry
insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn insert(self, value: Value) -> &'a mut Value {$/;"	P	implementation:VacantEntry
insert_ext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn insert_ext<T: Send + Sync + 'static>(&mut self, val: T) {$/;"	P	implementation:Response
insert_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn insert_header($/;"	P	implementation:Request
insert_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn insert_header(&mut self, key: impl Into<HeaderName>, value: impl ToHeaderValues) {$/;"	P	implementation:Response
inst_ptrs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn inst_ptrs(&self) -> InstPtrs<'_> {$/;"	P	implementation:State
insts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    insts: Vec<MaybeInst>,$/;"	m	struct:Compiler
insts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub insts: Vec<Inst>,$/;"	m	struct:Program
insts_scratch_space	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    insts_scratch_space: Vec<u8>,$/;"	m	struct:CacheInner
integer_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^macro_rules! integer_impl {$/;"	M
intense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn intense(mut self, intense: bool) -> Self {$/;"	P	implementation:CellStruct
intense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn intense(mut self, intense: bool) -> Self {$/;"	P	implementation:StyleStruct
intense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn intense(self, intense: bool) -> Self;$/;"	P	interface:Style
intense	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn intense(mut self, intense: bool) -> Self {$/;"	P	implementation:TableStruct
internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^pub mod internal {$/;"	n
internal_n_mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn internal_n_mask(bit: u64, n: u64) -> u64 {$/;"	f
into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn into(self) -> http::Request {$/;"	P	implementation:Request
into	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn into(self) -> http::Response {$/;"	P	implementation:Response
into_byte_regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn into_byte_regex(self) -> re_bytes::Regex {$/;"	P	implementation:Exec
into_byte_regex_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn into_byte_regex_set(self) -> re_set::bytes::RegexSet {$/;"	P	implementation:Exec
into_deserializer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn into_deserializer(self) -> Self::Deserializer {$/;"	P	implementation:Value
into_downward_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub(crate) fn into_downward_float<F: Float>(mut self) -> F {$/;"	P	implementation:ExtendedFloat
into_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub(crate) fn into_float<F: Float>(mut self) -> F {$/;"	P	implementation:ExtendedFloat
into_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^pub(crate) fn into_float<F>(fp: ExtendedFloat) -> F$/;"	f
into_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/exponent.rs	/^fn into_i32(value: usize) -> i32 {$/;"	f
into_inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    pub fn into_inner(self) -> W {$/;"	f
into_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:Program
into_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:SparseSet
into_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn into_iter<T>(self) -> StreamDeserializer<'de, R, T>$/;"	P	implementation:Deserializer
into_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:Map
into_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:Request
into_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn into_mut(self) -> &'a mut Value {$/;"	P	implementation:OccupiedEntry
into_regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn into_regex(self) -> re_unicode::Regex {$/;"	P	implementation:Exec
into_regex_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn into_regex_set(self) -> re_set::unicode::RegexSet {$/;"	P	implementation:Exec
into_searcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    fn into_searcher(self, haystack: &'t str) -> RegexSearcher<'r, 't> {$/;"	P	implementation:Regex
invalid_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^fn invalid_number() -> Error {$/;"	f
invalid_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^fn invalid_number() -> Error {$/;"	f
invalid_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^fn invalid_number() -> Error {$/;"	f
invalid_raw_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^fn invalid_raw_value() -> Error {$/;"	f
invalid_raw_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^fn invalid_raw_value() -> Error {$/;"	f
invalid_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn invalid_type(self, exp: &dyn Expected) -> Error {$/;"	P	implementation:ParserNumber
invalid_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn invalid_type(unexp: de::Unexpected, exp: &dyn de::Expected) -> Self {$/;"	P	implementation:Error
invalid_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn invalid_type<E>(&self, exp: &dyn Expected) -> E$/;"	P	implementation:Value
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn io(error: io::Error) -> Self {$/;"	P	implementation:Error
io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod io;$/;"	n
io_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^        fn io_error(_: fmt::Error) -> io::Error {$/;"	f	method:Value::fmt
is_anchor_end_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn is_anchor_end_match(&self, text: &[u8]) -> bool {$/;"	P	implementation:ExecNoSync
is_anchored_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub is_anchored_end: bool,$/;"	m	struct:Program
is_anchored_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub is_anchored_start: bool,$/;"	m	struct:Program
is_array	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_array(&self) -> bool {$/;"	P	implementation:Value
is_ascii_word	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn is_ascii_word(&self) -> bool {$/;"	P	implementation:Byte
is_boolean	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_boolean(&self) -> bool {$/;"	P	implementation:Value
is_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub is_bytes: bool,$/;"	m	struct:Program
is_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn is_data(&self) -> bool {$/;"	P	implementation:Error
is_denormal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_denormal(self) -> bool {$/;"	P	interface:Float
is_dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub is_dfa: bool,$/;"	m	struct:Program
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:StateMap
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn is_empty(&self) -> bool {$/;"	P	interface:Input
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:InputAt
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:LiteralSearcher
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn is_empty(&self) -> bool {$/;"	P	implementation:imp::LiteralSearcher
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:SparseSet
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:Map
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn is_empty(&self) -> Option<bool> {$/;"	P	implementation:Request
is_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn is_empty(&self) -> Option<bool> {$/;"	P	implementation:Response
is_empty_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool {$/;"	P	implementation:ByteInput
is_empty_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool {$/;"	P	implementation:CharInput
is_empty_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool {$/;"	P	implementation:T
is_empty_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool;$/;"	P	interface:Input
is_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn is_end(&self) -> bool {$/;"	P	implementation:InputAt
is_eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn is_eof(&self) -> bool {$/;"	P	implementation:Byte
is_eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn is_eof(&self) -> bool {$/;"	P	implementation:Error
is_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn is_f64(&self) -> bool {$/;"	P	implementation:Number
is_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_f64(&self) -> bool {$/;"	P	implementation:Value
is_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn is_i64(&self) -> bool {$/;"	P	implementation:Number
is_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_i64(&self) -> bool {$/;"	P	implementation:Value
is_inf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_inf(self) -> bool {$/;"	P	interface:Float
is_io	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn is_io(&self) -> bool {$/;"	P	implementation:Error
is_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn is_match(&self) -> bool {$/;"	P	implementation:StateFlags
is_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    pub fn is_match(&self) -> bool {$/;"	P	implementation:Result
is_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn is_match(&self) -> bool {$/;"	P	implementation:Inst
is_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn is_match(&self, text: &[u8]) -> bool {$/;"	P	implementation:Regex
is_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn is_match(&self, text: &str) -> bool {$/;"	P	implementation:Regex
is_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn is_match_at(&self, text: &[u8], start: usize) -> bool {$/;"	P	implementation:ExecNoSync
is_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn is_match_at(&self, text: &str, start: usize) -> bool {$/;"	P	implementation:ExecNoSyncStr
is_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn is_match_at(&self, text: &[u8], start: usize) -> bool {$/;"	P	implementation:Regex
is_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn is_match_at(&self, text: &Self::Text, start: usize) -> bool;$/;"	P	interface:RegularExpression
is_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn is_match_at(&self, text: &str, start: usize) -> bool {$/;"	P	implementation:Regex
is_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn is_none(self) -> bool {$/;"	P	implementation:Char
is_null	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_null(&self) -> bool {$/;"	P	implementation:Value
is_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_number(&self) -> bool {$/;"	P	implementation:Value
is_object	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_object(&self) -> bool {$/;"	P	implementation:Value
is_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub is_reverse: bool,$/;"	m	struct:Program
is_sign_negative	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_sign_negative(self) -> bool {$/;"	P	implementation:f32
is_sign_negative	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_sign_negative(self) -> bool {$/;"	P	implementation:f64
is_sign_negative	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_sign_negative(self) -> bool;$/;"	P	interface:Float
is_sign_positive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_sign_positive(self) -> bool {$/;"	P	implementation:f32
is_sign_positive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_sign_positive(self) -> bool {$/;"	P	implementation:f64
is_sign_positive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_sign_positive(self) -> bool;$/;"	P	interface:Float
is_special	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn is_special(self) -> bool {$/;"	P	interface:Float
is_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn is_start(&self) -> bool {$/;"	P	implementation:InputAt
is_start_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^fn is_start_byte(b: u8) -> bool {$/;"	f
is_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_string(&self) -> bool {$/;"	P	implementation:Value
is_suffix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn is_suffix(&self, text: &[u8]) -> bool {$/;"	P	implementation:Memmem
is_syntax	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn is_syntax(&self) -> bool {$/;"	P	implementation:Error
is_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub fn is_u64(&self) -> bool {$/;"	P	implementation:Number
is_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn is_u64(&self) -> bool {$/;"	P	implementation:Value
is_utf8_encoding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^fn is_utf8_encoding(encoding_label: &str) -> bool {$/;"	f
is_valid_cap_letter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^fn is_valid_cap_letter(b: &u8) -> bool {$/;"	f
is_word	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn is_word(&self) -> bool {$/;"	P	implementation:StateFlags
is_word_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn is_word_byte(self) -> bool {$/;"	P	implementation:Char
is_word_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn is_word_char(self) -> bool {$/;"	P	implementation:Char
ishl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn ishl(&mut self, n: usize) {$/;"	P	interface:Math
ishl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn ishl(x: &mut Vec<Limb>, n: usize) {$/;"	f	module:small
ishl_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn ishl_bits(x: &mut Vec<Limb>, n: usize) {$/;"	f	module:small
ishl_limbs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn ishl_limbs(x: &mut Vec<Limb>, n: usize) {$/;"	f	module:small
isub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn isub(x: &mut Limb, y: Limb) -> bool {$/;"	f	module:scalar
isub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn isub(x: &mut Vec<Limb>, y: &[Limb]) {$/;"	f	module:large
isub_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn isub_impl(x: &mut Vec<Limb>, y: Limb, xstart: usize) {$/;"	f	module:small
it	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    it: Matches<'r, 't>,$/;"	m	struct:RegexSearcher
it	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    it: SubCapturesPosIter<'c>,$/;"	m	struct:SubCaptureMatches
it	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    it: SubCapturesPosIter<'c>,$/;"	m	struct:SubCaptureMatches
italic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn italic(mut self, italic: bool) -> Self {$/;"	P	implementation:CellStruct
italic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn italic(mut self, italic: bool) -> Self {$/;"	P	implementation:StyleStruct
italic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn italic(self, italic: bool) -> Self;$/;"	P	interface:Style
italic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn italic(mut self, italic: bool) -> Self {$/;"	P	implementation:TableStruct
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn iter(&self) -> LiteralIter<'_> {$/;"	P	implementation:LiteralSearcher
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 't> {$/;"	P	implementation:Captures
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    pub fn iter(&self) -> SubCapturesPosIter<'_> {$/;"	P	implementation:Locations
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 't> {$/;"	P	implementation:Captures
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    iter: I,$/;"	m	struct:LineColIterator
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod iter;$/;"	n
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    iter: IntoIterImpl,$/;"	m	struct:IntoIter
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    iter: IterImpl<'a>,$/;"	m	struct:Iter
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    iter: IterMutImpl<'a>,$/;"	m	struct:IterMut
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    iter: KeysImpl<'a>,$/;"	m	struct:Keys
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    iter: ValuesImpl<'a>,$/;"	m	struct:Values
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    iter: ValuesMutImpl<'a>,$/;"	m	struct:ValuesMut
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn iter(&self) -> Iter {$/;"	P	implementation:Map
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    iter: LineColIterator<io::Bytes<R>>,$/;"	m	struct:IoRead
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    iter: <&'de Map<String, Value> as IntoIterator>::IntoIter,$/;"	m	struct:MapRefDeserializer
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    iter: <Map<String, Value> as IntoIterator>::IntoIter,$/;"	m	struct:MapDeserializer
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    iter: slice::Iter<'de, Value>,$/;"	m	struct:SeqRefDeserializer
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    iter: vec::IntoIter<Value>,$/;"	m	struct:SeqDeserializer
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn iter(&self) -> headers::Iter<'_> {$/;"	P	implementation:Request
iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn iter(&self) -> headers::Iter<'_> {$/;"	P	implementation:Response
iter_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn iter_mut(&mut self) -> IterMut {$/;"	P	implementation:Map
iter_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn iter_mut(&mut self) -> headers::IterMut<'_> {$/;"	P	implementation:Request
iter_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn iter_mut(&mut self) -> headers::IterMut<'_> {$/;"	P	implementation:Response
jobs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    jobs: Vec<Job>,$/;"	m	struct:Cache
json	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/macros.rs	/^macro_rules! json {$/;"	M
json	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    json: str,$/;"	m	struct:RawValue
json_expect_expr_comma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/macros.rs	/^macro_rules! json_expect_expr_comma {$/;"	M
json_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/macros.rs	/^macro_rules! json_internal {$/;"	M
json_internal_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/macros.rs	/^macro_rules! json_internal_vec {$/;"	M
json_unexpected	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/macros.rs	/^macro_rules! json_unexpected {$/;"	M
justify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    justify: Justify,$/;"	m	struct:CellFormat
justify	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn justify(mut self, justify: Justify) -> CellStruct {$/;"	P	implementation:CellStruct
karatsuba_mul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn karatsuba_mul(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
karatsuba_mul_fwd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn karatsuba_mul_fwd(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
karatsuba_split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn karatsuba_split(z: &[Limb], m: usize) -> (&[Limb], &[Limb]) {$/;"	f	module:large
karatsuba_uneven_mul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn karatsuba_uneven_mul(x: &[Limb], mut y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    key: SuffixCacheKey,$/;"	m	struct:SuffixCacheEntry
key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn key(&self) -> &String {$/;"	P	implementation:Entry
key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn key(&self) -> &String {$/;"	P	implementation:OccupiedEntry
key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn key(&self) -> &String {$/;"	P	implementation:VacantEntry
key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    key: Cow<'de, str>,$/;"	m	struct:MapKeyDeserializer
key_must_be_a_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^fn key_must_be_a_string() -> Error {$/;"	f
key_must_be_a_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^fn key_must_be_a_string() -> Error {$/;"	f
keys	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn keys(&self) -> Keys {$/;"	P	implementation:Map
large	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub large: ExtendedFloatArray,$/;"	m	struct:ModeratePathPowers
large	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^mod large {$/;"	n
large_atof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^fn large_atof<F>(mantissa: Bigint, exponent: i32) -> F$/;"	f
large_powers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod large_powers;$/;"	n
large_powers32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod large_powers32;$/;"	n
large_powers64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod large_powers64;$/;"	n
last	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    last: usize,$/;"	m	struct:Split
last	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    last: usize,$/;"	m	struct:Split
last_cache_flush	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    last_cache_flush: usize,$/;"	m	struct:Fsm
last_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    last_end: usize,$/;"	m	struct:Matches
last_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    last_match: Option<usize>,$/;"	m	struct:Matches
last_match_si	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    last_match_si: StatePtr,$/;"	m	struct:Fsm
last_step_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    last_step_end: usize,$/;"	m	struct:RegexSearcher
lcp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    lcp: Memmem,$/;"	m	struct:LiteralSearcher
lcp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn lcp(&self) -> &Memmem {$/;"	P	implementation:LiteralSearcher
lcs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    lcs: Memmem,$/;"	m	struct:LiteralSearcher
lcs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn lcs(&self) -> &Memmem {$/;"	P	implementation:LiteralSearcher
leading_zeros	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn leading_zeros(x: &[Limb]) -> usize {$/;"	f	module:small
leads_to_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn leads_to_match(&self, pc: usize) -> bool {$/;"	P	implementation:Program
left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn left(mut self, left_padding: usize) -> Self {$/;"	P	implementation:PaddingBuilder
left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn left(mut self, left: VerticalLine) -> Self {$/;"	P	implementation:BorderBuilder
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:StateMap
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:ByteInput
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:CharInput
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:T
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn len(&self) -> usize;$/;"	P	interface:Input
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    len: usize,$/;"	m	struct:InputAt
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:InputAt
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:LiteralSearcher
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Memmem
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn len(&self) -> usize {$/;"	P	implementation:imp::LiteralSearcher
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:CaptureLocations
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Captures
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Locations
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:CaptureLocations
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Captures
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:SparseSet
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:ExtendedFloatArray
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Map
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn len(&self) -> Option<usize> {$/;"	P	implementation:Request
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn len(&self) -> Option<usize> {$/;"	P	implementation:Response
len_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn len_utf8(self) -> usize {$/;"	P	implementation:Char
less	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn less(x: &[Limb], y: &[Limb]) -> bool {$/;"	f	module:large
lexical	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod lexical;$/;"	n
lib	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod lib {$/;"	n
lifetime	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    lifetime: PhantomData<&'de ()>,$/;"	m	struct:StreamDeserializer
line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    line: usize,$/;"	m	struct:ErrorImpl
line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub fn line(&self) -> usize {$/;"	P	implementation:Error
line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    line: usize,$/;"	m	struct:LineColIterator
line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    pub fn line(&self) -> usize {$/;"	f
line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    pub line: usize,$/;"	m	struct:Position
literal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod literal;$/;"	n
locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn locations(&self) -> CaptureLocations {$/;"	P	implementation:Regex
locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn locations(&self) -> Locations {$/;"	P	interface:RegularExpression
locations	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn locations(&self) -> CaptureLocations {$/;"	P	implementation:Regex
locs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    locs: re_trait::Locations,$/;"	m	struct:Captures
locs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    locs: &'c Locations,$/;"	m	struct:SubCapturesPosIter
locs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    locs: re_trait::Locations,$/;"	m	struct:Captures
logger	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^mod logger;$/;"	n
long_mul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn long_mul(x: &[Limb], y: &[Limb]) -> Vec<Limb> {$/;"	f	module:large
look	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub look: EmptyLook,$/;"	m	struct:InstEmptyLook
lower_n_halfway	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn lower_n_halfway(n: u64) -> u64 {$/;"	f
lower_n_mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn lower_n_mask(n: u64) -> u64 {$/;"	f
m	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    m: &'a mut Cache,$/;"	m	struct:Bounded
macros	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod macros;$/;"	n
main	/home/cht/Rust/spidder/src/main.rs	/^fn main() {$/;"	f
make_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^fn make_error(mut msg: String) -> Error {$/;"	f
mant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub mant: &'static [u64],$/;"	m	struct:ExtendedFloatArray
mant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub mant: u64,$/;"	m	struct:ExtendedFloat
mantissa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn mantissa(self) -> Self::Unsigned {$/;"	P	interface:Float
mantissa_exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/exponent.rs	/^pub(crate) fn mantissa_exponent(exponent: i32, fraction_digits: usize, truncated: usize) -> i32 /;"	f
mantissa_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn mantissa_limit() -> i32 {$/;"	P	implementation:f32
mantissa_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn mantissa_limit() -> i32 {$/;"	P	implementation:f64
mantissa_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn mantissa_limit() -> i32;$/;"	P	interface:Float
many_matches_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn many_matches_at($/;"	P	implementation:ExecNoSync
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    map: HashMap<State, StatePtr>,$/;"	m	struct:StateMap
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    pub fn map<U, F: FnMut(T) -> U>(self, mut f: F) -> Result<U> {$/;"	P	implementation:Result
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^pub mod map;$/;"	n
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    map: MapImpl<K, V>,$/;"	m	struct:Map
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    map: Map<String, Value>,$/;"	m	struct:SerializeStructVariant
match_nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn match_nfa(&self, text: &[u8], start: usize) -> bool {$/;"	P	implementation:ExecNoSync
match_nfa_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn match_nfa_type($/;"	P	implementation:ExecNoSync
match_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    match_type: MatchType,$/;"	m	struct:ExecReadOnly
match_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    match_type: Option<MatchType>,$/;"	m	struct:ExecBuilder
matcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    matcher: Matcher,$/;"	m	struct:LiteralSearcher
matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    matches: &'m mut [bool],$/;"	m	struct:Bounded
matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn matches(&self, byte: u8) -> bool {$/;"	P	implementation:InstBytes
matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn matches(&self, c: Char) -> bool {$/;"	P	implementation:InstRanges
matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub matches: Vec<InstPtr>,$/;"	m	struct:Program
math	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod math;$/;"	n
method	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    method: &'a str,$/;"	m	struct:RequestPairs
method	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    method: &'a str,$/;"	m	struct:RequestPairs
method	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn method(&self) -> Method {$/;"	P	implementation:Request
middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    middleware: Arc<Vec<Arc<dyn Middleware>>>,$/;"	m	struct:Client
middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^pub mod middleware;$/;"	n
middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    middleware: Option<Vec<Arc<dyn Middleware>>>,$/;"	m	struct:Request
middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn middleware(&mut self, middleware: impl Middleware) {$/;"	P	implementation:Request
middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn middleware(mut self, middleware: impl Middleware) -> Self {$/;"	P	implementation:RequestBuilder
moderate_path	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/algorithm.rs	/^pub(crate) fn moderate_path<F>($/;"	f
mul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub(crate) fn mul(&self, b: &ExtendedFloat) -> ExtendedFloat {$/;"	P	implementation:ExtendedFloat
mul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn mul(x: &[Limb], y: Limb) -> Vec<Limb> {$/;"	f	module:small
mul	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn mul(x: Limb, y: Limb, carry: Limb) -> (Limb, Limb) {$/;"	f	module:scalar
multi_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub multi_line: bool,$/;"	m	struct:RegexOptions
multiply_exponent_extended	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/algorithm.rs	/^fn multiply_exponent_extended<F>(fp: &mut ExtendedFloat, exponent: i32, truncated: bool) -> bool$/;"	f
n	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    n: usize,$/;"	m	struct:SplitN
n	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    n: usize,$/;"	m	struct:SplitN
n	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    n: N,$/;"	m	struct:Number
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn name(&self, name: &str) -> Option<Match<'t>> {$/;"	P	implementation:Captures
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn name(&self, name: &str) -> Option<Match<'t>> {$/;"	P	implementation:Captures
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    name: String,$/;"	m	struct:SerializeStructVariant
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    name: String,$/;"	m	struct:SerializeTupleVariant
named_groups	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    named_groups: Arc<HashMap<String, usize>>,$/;"	m	struct:Captures
named_groups	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    named_groups: Arc<HashMap<String, usize>>,$/;"	m	struct:Captures
nearest_error_is_accurate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^fn nearest_error_is_accurate(errors: u64, fp: &ExtendedFloat, extrabits: u64) -> bool {$/;"	f
needs_dotstar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn needs_dotstar(&self) -> bool {$/;"	P	implementation:Program
nest_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub nest_limit: u32,$/;"	m	struct:RegexOptions
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn new(filler: char) -> Self {$/;"	P	implementation:VerticalLine
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn new(left_end: char, right_end: char, junction: char, filler: char) -> Self {$/;"	P	implementation:HorizontalLine
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    pub fn new(_prog: &Program) -> Self {$/;"	P	implementation:Cache
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn new() -> Self {$/;"	P	implementation:ByteClassSet
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn new(size: usize) -> Self {$/;"	P	implementation:SuffixCache
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Compiler
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn new(num_byte_classes: usize) -> StateMap {$/;"	P	implementation:StateMap
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn new(num_byte_classes: usize) -> Transitions {$/;"	P	implementation:Transitions
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    pub fn new(prog: &Program) -> Self {$/;"	P	implementation:Cache
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn new(ro: &ExecReadOnly) -> Self {$/;"	P	implementation:ProgramCacheInner
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn new(re: &str) -> Self {$/;"	P	implementation:ExecBuilder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn new(s: &'t [u8]) -> CharInput<'t> {$/;"	P	implementation:CharInput
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn new(text: &'t [u8], only_utf8: bool) -> ByteInput<'t> {$/;"	P	implementation:ByteInput
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn new() -> SingleByteSet {$/;"	P	implementation:SingleByteSet
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn new(lits: &Literals, sset: SingleByteSet) -> Self {$/;"	P	implementation:Matcher
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn new(lits: Literals, matcher: Matcher) -> Self {$/;"	P	implementation:LiteralSearcher
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn new(pat: &[u8]) -> Memmem {$/;"	P	implementation:Memmem
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn new() -> Self {$/;"	P	implementation:Threads
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    pub fn new(_prog: &Program) -> Self {$/;"	P	implementation:Cache
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    pub fn new(create: CreateFn<T>) -> Pool<T> {$/;"	P	implementation:Pool
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Program
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn new(haystack: &'t [u8], start: usize, end: usize) -> Match<'t> {$/;"	P	implementation:Match
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn new(re: &str) -> Result<Regex, Error> {$/;"	P	implementation:Regex
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn new(haystack: &'t str, start: usize, end: usize) -> Match<'t> {$/;"	P	implementation:Match
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn new(re: &str) -> Result<Regex, Error> {$/;"	P	implementation:Regex
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    pub fn new(size: usize) -> SparseSet {$/;"	P	implementation:SparseSet
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:MapAccess
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:SeqAccess
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:UnitVariantAccess
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn new(de: &'a mut Deserializer<R>) -> Self {$/;"	P	implementation:VariantAccess
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    pub fn new(read: R) -> Self {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    pub(crate) fn new(_kind: ErrorKind, _error: &'static str) -> Error {$/;"	P	implementation:Error
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    pub fn new(iter: I) -> LineColIterator<I> {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Map
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    pub fn new(reader: R) -> Self {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    pub fn new(s: &'a str) -> Self {$/;"	P	implementation:StrRead
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    pub fn new(slice: &'a [u8]) -> Self {$/;"	P	implementation:SliceRead
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    pub fn new(writer: W) -> Self {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn new(map: &'de Map<String, Value>) -> Self {$/;"	P	implementation:MapRefDeserializer
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn new(map: Map<String, Value>) -> Self {$/;"	P	implementation:MapDeserializer
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn new(slice: &'de [Value]) -> Self {$/;"	P	implementation:SeqRefDeserializer
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn new(value: Cow<'de, str>) -> Self {$/;"	P	implementation:BorrowedCowStrDeserializer
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn new(vec: Vec<Value>) -> Self {$/;"	P	implementation:SeqDeserializer
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Client
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Logger
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Logger
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    pub fn new($/;"	P	implementation:Next
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/redirect/mod.rs	/^    pub fn new(attempts: u8) -> Self {$/;"	P	implementation:Redirect
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn new(method: Method, url: Url) -> Self {$/;"	P	implementation:Request
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn new(method: Method, url: Url) -> Self {$/;"	P	implementation:RequestBuilder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub(crate) fn new(res: http_client::Response) -> Self {$/;"	P	implementation:Response
new_many	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn new_many<I, S>(res: I) -> Self$/;"	P	implementation:ExecBuilder
new_options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn new_options(opts: RegexOptions) -> Self {$/;"	P	implementation:ExecBuilder
new_pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn new_pool(ro: &Arc<ExecReadOnly>) -> Box<Pool<ProgramCache>> {$/;"	P	implementation:ExecReadOnly
new_shared	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub(crate) fn new_shared() -> Self {$/;"	P	implementation:Client
new_shared_or_panic	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub(crate) fn new_shared_or_panic() -> Self {$/;"	P	implementation:Client
newtype_variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value>$/;"	P	implementation:UnitVariantAccess
newtype_variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value>$/;"	P	implementation:VariantAccess
newtype_variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Error>$/;"	P	implementation:UnitOnly
newtype_variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:VariantDeserializer
newtype_variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:VariantRefDeserializer
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn next(&mut self) -> Option<usize> {$/;"	P	implementation:InstPtrs
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn next(&self, si: StatePtr, cls: usize) -> StatePtr {$/;"	P	implementation:Transitions
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:LiteralIter
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    fn next(&mut self) -> SearchStep {$/;"	P	implementation:RegexSearcher
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn next(&mut self) -> Option<&'t [u8]> {$/;"	P	implementation:Split
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn next(&mut self) -> Option<&'t [u8]> {$/;"	P	implementation:SplitN
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn next(&mut self) -> Option<Captures<'t>> {$/;"	P	implementation:CaptureMatches
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn next(&mut self) -> Option<Match<'t>> {$/;"	P	implementation:Matches
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn next(&mut self) -> Option<Option<&'r str>> {$/;"	P	implementation:CaptureNames
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn next(&mut self) -> Option<Option<Match<'t>>> {$/;"	P	implementation:SubCaptureMatches
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn next(&mut self) -> Option<(usize, usize)> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn next(&mut self) -> Option<Locations> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn next(&mut self) -> Option<Option<(usize, usize)>> {$/;"	P	implementation:SubCapturesPosIter
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn next(&mut self) -> Option<&'t str> {$/;"	P	implementation:Split
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn next(&mut self) -> Option<&'t str> {$/;"	P	implementation:SplitN
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn next(&mut self) -> Option<Captures<'t>> {$/;"	P	implementation:CaptureMatches
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn next(&mut self) -> Option<Match<'t>> {$/;"	P	implementation:Matches
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn next(&mut self) -> Option<Option<&'r str>> {$/;"	P	implementation:CaptureNames
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn next(&mut self) -> Option<Option<Match<'t>>> {$/;"	P	implementation:SubCaptureMatches
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn next(&mut self) -> Option<Result<T>> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    fn next(&mut self) -> Option<io::Result<u8>> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:SliceRead
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:StrRead
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn next(&mut self) -> Result<Option<u8>>;$/;"	P	interface:Read
next_after_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn next_after_empty(&self, _text: &[u8], i: usize) -> usize {$/;"	P	implementation:ExecNoSync
next_after_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn next_after_empty(&self, text: &str, i: usize) -> usize {$/;"	P	implementation:ExecNoSyncStr
next_after_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn next_after_empty(&self, text: &Self::Text, i: usize) -> usize;$/;"	P	interface:RegularExpression
next_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn next_char(&self, at: InputAt) -> Char {$/;"	P	implementation:ByteInput
next_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn next_char(&self, at: InputAt) -> Char {$/;"	P	implementation:CharInput
next_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn next_char(&self, at: InputAt) -> Char {$/;"	P	implementation:T
next_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn next_char(&self, at: InputAt) -> Char;$/;"	P	interface:Input
next_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn next_char(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:Deserializer
next_char_or_null	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn next_char_or_null(&mut self) -> Result<u8> {$/;"	P	implementation:Deserializer
next_element_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>$/;"	P	implementation:SeqAccess
next_element_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:SeqDeserializer
next_element_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:SeqRefDeserializer
next_inst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn next_inst(&self) -> Patch {$/;"	P	implementation:Compiler
next_key_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>$/;"	P	implementation:MapAccess
next_key_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Error>$/;"	P	implementation:NumberDeserializer
next_key_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Error>$/;"	P	implementation:BorrowedRawDeserializer
next_key_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Error>$/;"	P	implementation:OwnedRawDeserializer
next_key_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:MapDeserializer
next_key_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>$/;"	P	implementation:MapRefDeserializer
next_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pattern.rs	/^    next_match: Option<(usize, usize)>,$/;"	m	struct:RegexSearcher
next_middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    next_middleware: &'a [Arc<dyn Middleware>],$/;"	m	struct:Next
next_or_eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^fn next_or_eof<'de, R>(read: &mut R) -> Result<u8>$/;"	f
next_pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn next_pos(&self) -> usize {$/;"	P	implementation:InputAt
next_positive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn next_positive(self) -> Self {$/;"	P	interface:Float
next_si	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    unsafe fn next_si(&self, si: StatePtr, text: &[u8], i: usize) -> StatePtr {$/;"	P	implementation:Fsm
next_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn next_state($/;"	P	implementation:Fsm
next_unchecked	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    unsafe fn next_unchecked(&self, si: StatePtr, cls: usize) -> StatePtr {$/;"	P	implementation:Transitions
next_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^pub fn next_utf8(text: &[u8], i: usize) -> usize {$/;"	f
next_value_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value>$/;"	P	implementation:MapAccess
next_value_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Error>$/;"	P	implementation:NumberDeserializer
next_value_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Error>$/;"	P	implementation:BorrowedRawDeserializer
next_value_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Error>$/;"	P	implementation:OwnedRawDeserializer
next_value_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:MapDeserializer
next_value_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Error>$/;"	P	implementation:MapRefDeserializer
nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    nfa: Program,$/;"	m	struct:ExecReadOnly
nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn nfa(mut self) -> Self {$/;"	P	implementation:ExecBuilder
nlist	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    nlist: Threads,$/;"	m	struct:Cache
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {$/;"	P	implementation:Cow
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {$/;"	P	implementation:NoExpand
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {$/;"	P	implementation:Vec
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {$/;"	P	implementation:u8
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {$/;"	P	implementation:ReplacerRef
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {$/;"	P	interface:Replacer
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^fn no_expansion<T: AsRef<[u8]>>(t: &T) -> Option<Cow<'_, [u8]>> {$/;"	f
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, str>> {$/;"	P	implementation:Cow
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, str>> {$/;"	P	implementation:NoExpand
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, str>> {$/;"	P	implementation:ReplacerRef
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, str>> {$/;"	P	implementation:String
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn no_expansion(&mut self) -> Option<Cow<'_, str>> {$/;"	P	implementation:str
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {$/;"	P	interface:Replacer
no_expansion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^fn no_expansion<T: AsRef<str>>(t: &T) -> Option<Cow<'_, str>> {$/;"	f
nonzero	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^pub fn nonzero<T: Integer>(x: &[T], rindex: usize) -> bool {$/;"	f
normalize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub(crate) fn normalize(&mut self) -> u32 {$/;"	P	implementation:ExtendedFloat
normalize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    fn normalize(&mut self) {$/;"	P	interface:Math
normalize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn normalize(x: &mut Vec<Limb>) {$/;"	f	module:small
not_word_boundary	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    not_word_boundary: bool,$/;"	m	struct:EmptyFlags
nth_bit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn nth_bit(n: u64) -> u64 {$/;"	f
num	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod num;$/;"	n
num_byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn num_byte_classes(&self) -> usize {$/;"	P	implementation:Fsm
num_byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    num_byte_classes: usize,$/;"	m	struct:StateMap
num_byte_classes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    num_byte_classes: usize,$/;"	m	struct:Transitions
num_chars	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn num_chars(&self) -> usize {$/;"	P	implementation:InstRanges
num_exprs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    num_exprs: usize,$/;"	m	struct:Compiler
num_states	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn num_states(&self) -> usize {$/;"	P	implementation:Transitions
number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod number;$/;"	n
number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub number: Option<String>,$/;"	m	struct:NumberDeserializer
number_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^macro_rules! number_impl {$/;"	M
occupied	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    occupied: OccupiedEntryImpl<'a>,$/;"	m	struct:OccupiedEntry
octal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub octal: bool,$/;"	m	struct:RegexOptions
offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    offset: usize,$/;"	m	struct:StreamDeserializer
oibits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn oibits() {$/;"	f	module:tests
only_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn only_utf8(mut self, yes: bool) -> Self {$/;"	P	implementation:Compiler
only_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    only_utf8: bool,$/;"	m	struct:ExecBuilder
only_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn only_utf8(mut self, yes: bool) -> Self {$/;"	P	implementation:ExecBuilder
only_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    only_utf8: bool,$/;"	m	struct:ByteInput
only_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn only_utf8(&self) -> bool {$/;"	P	implementation:Program
only_utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub only_utf8: bool,$/;"	m	struct:Program
options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    options: RegexOptions,$/;"	m	struct:ExecBuilder
options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn options(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn options(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
or_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn or_insert(self, default: Value) -> &'a mut Value {$/;"	P	implementation:Entry
or_insert_with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn or_insert_with<F>(self, default: F) -> &'a mut Value$/;"	P	implementation:Entry
output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    output: PhantomData<T>,$/;"	m	struct:StreamDeserializer
overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^macro_rules! overflow {$/;"	M
overflowing_shr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/shift.rs	/^pub(crate) fn overflowing_shr(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
owner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    owner: AtomicUsize,$/;"	m	struct:Pool
owner_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    owner_val: T,$/;"	m	struct:Pool
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^        fn p(mut ips: Vec<u32>, flags: u8) -> bool {$/;"	f	function:tests::prop_state_encode_decode
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^        fn p(n: i32) -> bool {$/;"	f	function:tests::prop_read_write_i32
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^        fn p(n: u32) -> bool {$/;"	f	function:tests::prop_read_write_u32
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^        fn p(cp: char) -> bool {$/;"	f	function:tests::prop_encode_matches_std
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^        fn p(given_cp: char) -> bool {$/;"	f	function:tests::prop_decode_last_matches_std
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^        fn p(given_cp: char) -> bool {$/;"	f	function:tests::prop_decode_matches_std
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^        fn p(given_cp: char) -> bool {$/;"	f	function:tests::prop_roundtrip
p	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^        fn p(given_cp: char) -> bool {$/;"	f	function:tests::prop_roundtrip_last
padding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    padding: Padding,$/;"	m	struct:CellFormat
padding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn padding(mut self, padding: Padding) -> CellStruct {$/;"	P	implementation:CellStruct
parse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn parse(&self) -> Result<Parsed, Error> {$/;"	P	implementation:ExecBuilder
parse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod parse;$/;"	n
parse_any_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_any_number(&mut self, positive: bool) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_any_signed_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_any_signed_number(&mut self) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_concise_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/parse.rs	/^pub fn parse_concise_float<F>(mantissa: u64, mant_exp: i32) -> F$/;"	f
parse_decimal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_decimal($/;"	P	implementation:Deserializer
parse_decimal_overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_decimal_overflow($/;"	P	implementation:Deserializer
parse_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^fn parse_escape<'de, R: Read<'de>>(read: &mut R, scratch: &mut Vec<u8>) -> Result<()> {$/;"	f
parse_exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_exponent($/;"	P	implementation:Deserializer
parse_exponent_overflow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_exponent_overflow($/;"	P	implementation:Deserializer
parse_ident	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_ident(&mut self, ident: &[u8]) -> Result<()> {$/;"	P	implementation:Deserializer
parse_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^fn parse_index(s: &str) -> Option<usize> {$/;"	f
parse_integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_integer(&mut self, positive: bool) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_line_col	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^fn parse_line_col(msg: &mut String) -> Option<(usize, usize)> {$/;"	f
parse_long_decimal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_long_decimal(&mut self, positive: bool, integer_end: usize) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_long_exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_long_exponent(&mut self, positive: bool, integer_end: usize) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_long_integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_long_integer(&mut self, positive: bool, partial_significand: u64) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_long_integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_long_integer(&mut self, positive: bool, significand: u64) -> Result<f64> {$/;"	P	implementation:Deserializer
parse_mantissa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^fn parse_mantissa<F>(integer: &[u8], fraction: &[u8]) -> Bigint$/;"	f
parse_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_number(&mut self, positive: bool, significand: u64) -> Result<ParserNumber> {$/;"	P	implementation:Deserializer
parse_object_colon	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_object_colon(&mut self) -> Result<()> {$/;"	P	implementation:Deserializer
parse_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'a, 's, str>> {$/;"	P	implementation:SliceRead
parse_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'a, 's, str>> {$/;"	P	implementation:StrRead
parse_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> /;"	f
parse_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str<'s>(&'s mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>>;$/;"	P	interface:Read
parse_str_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str_bytes<'s, T, F>($/;"	P	implementation:SliceRead
parse_str_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str_bytes<'s, T, F>($/;"	f
parse_str_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str_raw<'s>($/;"	P	implementation:SliceRead
parse_str_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str_raw<'s>($/;"	P	implementation:StrRead
parse_str_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str_raw<'s>($/;"	P	interface:Read
parse_str_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn parse_str_raw<'s>($/;"	f
parse_truncated_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/parse.rs	/^pub fn parse_truncated_float<F>(integer: &[u8], mut fraction: &[u8], exponent: i32) -> F$/;"	f
parse_whitespace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn parse_whitespace(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:Deserializer
partial_cmp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn partial_cmp(&self, other: &Char) -> Option<Ordering> {$/;"	P	implementation:char
partial_cmp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn partial_cmp(&self, other: &char) -> Option<Ordering> {$/;"	P	implementation:Char
partial_eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^mod partial_eq;$/;"	n
partialeq_numeric	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^macro_rules! partialeq_numeric {$/;"	M
patch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn patch(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
patch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn patch(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
pats	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub pats: Vec<String>,$/;"	m	struct:RegexOptions
pattern	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod pattern;$/;"	n
pc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pc: InstPtr,$/;"	m	struct:SuffixCacheEntry
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:Deserializer
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:SliceRead
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	P	implementation:StrRead
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>> {$/;"	f
peek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek(&mut self) -> Result<Option<u8>>;$/;"	P	interface:Read
peek_end_of_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn peek_end_of_value(&mut self) -> Result<()> {$/;"	f
peek_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn peek_error(&self, reason: ErrorCode) -> Error {$/;"	P	implementation:Deserializer
peek_invalid_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn peek_invalid_type(&mut self, exp: &dyn Expected) -> Error {$/;"	P	implementation:Deserializer
peek_or_null	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn peek_or_null(&mut self) -> Result<u8> {$/;"	P	implementation:Deserializer
peek_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek_position(&self) -> Position {$/;"	P	implementation:SliceRead
peek_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek_position(&self) -> Position {$/;"	P	implementation:StrRead
peek_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek_position(&self) -> Position {$/;"	f
peek_position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn peek_position(&self) -> Position;$/;"	P	interface:Read
pikevm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub pikevm: pikevm::Cache,$/;"	m	struct:ProgramCacheInner
pikevm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod pikevm;$/;"	n
pointer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn pointer(&self, pointer: &str) -> Option<&Value> {$/;"	P	implementation:Value
pointer_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn pointer_mut(&mut self, pointer: &str) -> Option<&mut Value> {$/;"	P	implementation:Value
poll	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {$/;"	P	implementation:RequestBuilder
poll_fill_buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<io::Result<&'_ [u8]>> {$/;"	P	implementation:Response
poll_read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn poll_read($/;"	P	implementation:Response
pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pool: Box<Pool<ProgramCache>>,$/;"	m	struct:Exec
pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod pool;$/;"	n
pool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    pool: &'a Pool<T>,$/;"	m	struct:PoolGuard
pop_split_hole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn pop_split_hole(&mut self) -> ResultOrEmpty {$/;"	P	implementation:Compiler
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pos: usize,$/;"	m	struct:InputAt
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    pub fn pos(&self) -> usize {$/;"	P	implementation:InputAt
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {$/;"	P	implementation:CaptureLocations
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {$/;"	P	implementation:Locations
pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {$/;"	P	implementation:CaptureLocations
position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn position(&self) -> Position {$/;"	P	implementation:SliceRead
position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn position(&self) -> Position {$/;"	P	implementation:StrRead
position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn position(&self) -> Position {$/;"	f
position	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn position(&self) -> Position;$/;"	P	interface:Read
position_of_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn position_of_index(&self, i: usize) -> Position {$/;"	P	implementation:SliceRead
post	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn post(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
post	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn post(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
pow10	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn pow10(self, n: i32) -> Self;$/;"	P	interface:Float
pow10	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn pow10(self, n: i32) -> f32 {$/;"	P	implementation:f32
pow10	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn pow10(self, n: i32) -> f64 {$/;"	P	implementation:f64
prefix_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn prefix_at(&self, text: &[u8], at: usize) -> Option<usize> {$/;"	P	implementation:Fsm
prefix_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn prefix_at($/;"	P	implementation:ByteInput
prefix_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn prefix_at($/;"	P	implementation:CharInput
prefix_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn prefix_at($/;"	P	implementation:T
prefix_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn prefix_at($/;"	P	interface:Input
prefixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    prefixes: Literals,$/;"	m	struct:Parsed
prefixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn prefixes(lits: &Literals) -> Self {$/;"	P	implementation:Matcher
prefixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn prefixes(lits: &Literals) -> SingleByteSet {$/;"	P	implementation:SingleByteSet
prefixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn prefixes(lits: Literals) -> Self {$/;"	P	implementation:LiteralSearcher
prefixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn prefixes(_: Literals) -> Self {$/;"	P	implementation:imp::LiteralSearcher
prefixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub prefixes: LiteralSearcher,$/;"	m	struct:Program
prelude	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.3.15/src/lib.rs	/^pub mod prelude {$/;"	n
pretty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    pub fn pretty(writer: W) -> Self {$/;"	f
previous_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn previous_char(&self, at: InputAt) -> Char {$/;"	P	implementation:ByteInput
previous_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn previous_char(&self, at: InputAt) -> Char {$/;"	P	implementation:CharInput
previous_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn previous_char(&self, at: InputAt) -> Char {$/;"	P	implementation:T
previous_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    fn previous_char(&self, at: InputAt) -> Char;$/;"	P	interface:Input
print	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^fn print(level: log::Level, msg: Arguments<'_>, key_values: impl log::kv::Source) {$/;"	f
print	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^fn print(level: log::Level, msg: Arguments<'_>, key_values: impl log::kv::Source) {$/;"	f
print_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn print_char(writer: &BufferWriter, c: char, color_spec: &ColorSpec) -> Result<()> {$/;"	f
print_horizontal_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn print_horizontal_line($/;"	f
print_stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^pub fn print_stderr<T: Table>(table: T) -> Result<()> {$/;"	f
print_stderr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub(crate) fn print_stderr(&self) -> Result<()> {$/;"	P	implementation:TableStruct
print_stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^pub fn print_stdout<T: Table>(table: T) -> Result<()> {$/;"	f
print_stdout	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub(crate) fn print_stdout(&self) -> Result<()> {$/;"	P	implementation:TableStruct
print_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn print_str(writer: &BufferWriter, s: &str, color_spec: &ColorSpec) -> Result<()> {$/;"	f
print_vertical_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn print_vertical_line($/;"	f
print_writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    pub(crate) fn print_writer($/;"	P	implementation:RowStruct
print_writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn print_writer(&self, writer: BufferWriter) -> Result<()> {$/;"	P	implementation:TableStruct
println_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn println_char(writer: &BufferWriter, c: char, color_spec: &ColorSpec) -> Result<()>/;"	f
println_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub(crate) fn println_str(writer: &BufferWriter, s: &str, color_spec: &ColorSpec) -> Result<()> /;"	f
private	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^mod private {$/;"	n
private	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^mod private {$/;"	n
prog	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    prog: &'r Program,$/;"	m	struct:Bounded
prog	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    prog: &'a Program,$/;"	m	struct:Fsm
prog	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod prog;$/;"	n
prog	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    prog: &'r Program,$/;"	m	struct:Fsm
prop_decode_last_matches_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn prop_decode_last_matches_std() {$/;"	f	module:tests
prop_decode_matches_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn prop_decode_matches_std() {$/;"	f	module:tests
prop_encode_matches_std	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn prop_encode_matches_std() {$/;"	f	module:tests
prop_read_write_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn prop_read_write_i32() {$/;"	f	module:tests
prop_read_write_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn prop_read_write_u32() {$/;"	f	module:tests
prop_roundtrip	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn prop_roundtrip() {$/;"	f	module:tests
prop_roundtrip_last	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn prop_roundtrip_last() {$/;"	f	module:tests
prop_state_encode_decode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn prop_state_encode_decode() {$/;"	f	module:tests
push_compiled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn push_compiled(&mut self, inst: Inst) {$/;"	P	implementation:Compiler
push_hole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn push_hole(&mut self, inst: InstHole) -> Hole {$/;"	P	implementation:Compiler
push_inst_ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn push_inst_ptr(data: &mut Vec<u8>, prev: &mut InstPtr, ip: InstPtr) {$/;"	f
push_split_hole	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn push_split_hole(&mut self) -> Hole {$/;"	P	implementation:Compiler
put	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn put(&self, value: Box<T>) {$/;"	P	implementation:Pool
put	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn put(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
put	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn put(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
qcur	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    qcur: SparseSet,$/;"	m	struct:Cache
qnext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    qnext: SparseSet,$/;"	m	struct:Cache
query	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn query<T: serde::de::DeserializeOwned>(&self) -> crate::Result<T> {$/;"	P	implementation:Request
query	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub fn query(mut self, query: &impl Serialize) -> std::result::Result<Self, Error> {$/;"	P	implementation:RequestBuilder
quit_after_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    quit_after_match: bool,$/;"	m	struct:Fsm
range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn range(&self) -> Range<usize> {$/;"	P	implementation:Match
range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn range(&self) -> Range<usize> {$/;"	P	implementation:Match
ranges	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    ranges: &'b [hir::ClassUnicodeRange],$/;"	m	struct:CompileClass
ranges	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub ranges: Box<[(char, char)]>,$/;"	m	struct:InstRanges
raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod raw;$/;"	n
raw_buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    raw_buffer: Option<Vec<u8>>,$/;"	m	struct:IoRead
raw_buffering_start_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    raw_buffering_start_index: usize,$/;"	m	struct:SliceRead
raw_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    pub raw_value: Option<&'de str>,$/;"	m	struct:BorrowedRawDeserializer
raw_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    pub raw_value: Option<String>,$/;"	m	struct:OwnedRawDeserializer
re	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    re: R,$/;"	m	struct:Matches
re_builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod re_builder;$/;"	n
re_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod re_bytes;$/;"	n
re_set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod re_set;$/;"	n
re_trait	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod re_trait;$/;"	n
re_unicode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod re_unicode;$/;"	n
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    read: R,$/;"	m	struct:Deserializer
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod read;$/;"	n
read_captures_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn read_captures_at<'t>($/;"	P	implementation:Regex
read_captures_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn read_captures_at<'t>($/;"	P	implementation:Regex
read_vari32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn read_vari32(data: &[u8]) -> (i32, usize) {$/;"	f
read_varu32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn read_varu32(data: &[u8]) -> (u32, usize) {$/;"	f
recv_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub async fn recv_bytes(&self, req: impl Into<Request>) -> Result<Vec<u8>> {$/;"	P	implementation:Client
recv_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub async fn recv_bytes(self) -> Result<Vec<u8>> {$/;"	P	implementation:RequestBuilder
recv_form	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub async fn recv_form<T: serde::de::DeserializeOwned>($/;"	P	implementation:Client
recv_form	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub async fn recv_form<T: serde::de::DeserializeOwned>(self) -> Result<T> {$/;"	P	implementation:RequestBuilder
recv_json	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub async fn recv_json<T: serde::de::DeserializeOwned>($/;"	P	implementation:Client
recv_json	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub async fn recv_json<T: serde::de::DeserializeOwned>(self) -> Result<T> {$/;"	P	implementation:RequestBuilder
recv_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub async fn recv_string(&self, req: impl Into<Request>) -> Result<String> {$/;"	P	implementation:Client
recv_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub async fn recv_string(self) -> Result<String> {$/;"	P	implementation:RequestBuilder
redirect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^mod redirect;$/;"	n
regex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    pub fn regex(&self) -> &R {$/;"	f
regex_strings	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn regex_strings(&self) -> &[String] {$/;"	P	implementation:Exec
reject_invalid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn reject_invalid() {$/;"	f	module:tests
reject_invalid_last	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^    fn reject_invalid_last() {$/;"	f	module:tests
remaining_depth	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    remaining_depth: u8,$/;"	m	struct:Deserializer
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn remove(self) -> Value {$/;"	P	implementation:OccupiedEntry
remove	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn remove<Q>(&mut self, key: &Q) -> Option<Value>$/;"	P	implementation:Map
remove_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>$/;"	P	implementation:Map
remove_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn remove_header(&mut self, name: impl Into<HeaderName>) -> Option<HeaderValues> {$/;"	P	implementation:Request
remove_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn remove_header(&mut self, name: impl Into<HeaderName>) -> Option<HeaderValues> {$/;"	P	implementation:Response
replace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn replace<'t, R: Replacer>($/;"	P	implementation:Regex
replace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn replace<'t, R: Replacer>($/;"	P	implementation:Regex
replace_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn replace_all<'t, R: Replacer>($/;"	P	implementation:Regex
replace_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn replace_all<'t, R: Replacer>($/;"	P	implementation:Regex
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, _: &Captures<'_>, dst: &mut Vec<u8>) {$/;"	P	implementation:NoExpand
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {$/;"	P	implementation:Cow
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {$/;"	P	implementation:ReplacerRef
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {$/;"	P	implementation:Vec
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {$/;"	P	implementation:u8
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>) {$/;"	f
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>);$/;"	P	interface:Replacer
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, _: &Captures<'_>, dst: &mut String) {$/;"	P	implementation:NoExpand
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {$/;"	P	implementation:Cow
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {$/;"	P	implementation:ReplacerRef
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {$/;"	P	implementation:String
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {$/;"	P	implementation:str
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String) {$/;"	f
replace_append	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String);$/;"	P	interface:Replacer
replacen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn replacen<'t, R: Replacer>($/;"	P	implementation:Regex
replacen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn replacen<'t, R: Replacer>($/;"	P	implementation:Regex
req	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    req: http_client::Request,$/;"	m	struct:Request
req	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    req: Option<Request>,$/;"	m	struct:RequestBuilder
request	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^mod request;$/;"	n
request_builder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^mod request_builder;$/;"	n
required_dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub(crate) fn required_dimension(&self) -> Dimension {$/;"	P	implementation:CellStruct
required_dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    pub(crate) fn required_dimension(&self) -> Dimension {$/;"	P	implementation:RowStruct
required_dimension	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn required_dimension(&self) -> Dimension {$/;"	P	implementation:TableStruct
res	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    res: Vec<String>,$/;"	m	struct:ExecReadOnly
reset_colors	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub fn reset_colors(writer: &BufferWriter) -> Result<()> {$/;"	f
reset_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn reset_size(&mut self) {$/;"	P	implementation:CacheInner
resize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn resize(&mut self, num_insts: usize, ncaps: usize) {$/;"	P	implementation:Threads
response	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^mod response;$/;"	n
restore_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn restore_state(&mut self, state: State) -> Option<StatePtr> {$/;"	P	implementation:Fsm
reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn reverse(mut self, yes: bool) -> Self {$/;"	P	implementation:Compiler
reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    pub fn reverse($/;"	P	implementation:Fsm
right	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn right(mut self, right_padding: usize) -> Self {$/;"	P	implementation:PaddingBuilder
right	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn right(mut self, right: VerticalLine) -> Self {$/;"	P	implementation:BorderBuilder
ro	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    ro: &'c Arc<ExecReadOnly>,$/;"	m	struct:ExecNoSync
ro	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    ro: Arc<ExecReadOnly>,$/;"	m	struct:Exec
round_downward	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn round_downward(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
round_nearest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn round_nearest(fp: &mut ExtendedFloat, shift: i32) -> (bool, bool) {$/;"	f
round_nearest_tie_even	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^fn round_nearest_tie_even(fp: &mut ExtendedFloat, shift: i32, is_truncated: bool) {$/;"	f
round_nearest_tie_even	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn round_nearest_tie_even(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
round_positive_even	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn round_positive_even(self) -> Self {$/;"	P	interface:Float
round_to_float	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn round_to_float<F, Algorithm>(fp: &mut ExtendedFloat, algorithm: Algorithm)$/;"	f
round_to_native	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/float.rs	/^    pub(crate) fn round_to_native<F, Algorithm>(&mut self, algorithm: Algorithm)$/;"	P	implementation:ExtendedFloat
round_to_native	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn round_to_native<F, Algorithm>(fp: &mut ExtendedFloat, algorithm: Algorithm)$/;"	f
round_toward	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^fn round_toward(fp: &mut ExtendedFloat, shift: i32) -> bool {$/;"	f
rounding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^pub(crate) mod rounding;$/;"	n
row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/csv.rs	/^fn row(record: &StringRecord) -> RowStruct {$/;"	f
row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod row;$/;"	n
row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn row(self) -> RowStruct {$/;"	P	implementation:RowStruct
row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn row(self) -> RowStruct {$/;"	f
row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn row(self) -> RowStruct;$/;"	P	interface:Row
row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn row(mut self, row: Option<HorizontalLine>) -> Self {$/;"	P	implementation:SeparatorBuilder
rows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    rows: Vec<RowStruct>,$/;"	m	struct:TableStruct
run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/mod.rs	/^    pub fn run(mut self, req: Request, client: Client) -> BoxFuture<'a, Result<Response>> {$/;"	P	implementation:Next
scalar	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^mod scalar {$/;"	n
scan_decimal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn scan_decimal(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn scan_exponent(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_integer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn scan_integer(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn scan_number(&mut self, buf: &mut String) -> Result<()> {$/;"	P	implementation:Deserializer
scan_or_eof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn scan_or_eof(&mut self, buf: &mut String) -> Result<u8> {$/;"	P	implementation:Deserializer
scientific_exponent	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/exponent.rs	/^pub(crate) fn scientific_exponent($/;"	f
scratch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    scratch: Vec<u8>,$/;"	m	struct:Deserializer
searcher	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn searcher(&self) -> ExecNoSync<'_> {$/;"	P	implementation:Exec
searcher_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn searcher_str(&self) -> ExecNoSyncStr<'_> {$/;"	P	implementation:Exec
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub async fn send(&self, req: impl Into<Request>) -> Result<Response> {$/;"	P	implementation:Client
send	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub async fn send(mut self) -> Result<Response> {$/;"	P	implementation:RequestBuilder
separator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn separator(mut self, separator: Separator) -> Self {$/;"	P	implementation:TableStruct
ser	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^mod ser;$/;"	n
ser	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    ser: &'a mut Serializer<W, F>,$/;"	m	struct:MapKeySerializer
ser	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^mod ser;$/;"	n
serialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Map
serialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Number
serialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:RawValue
serialize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>$/;"	P	implementation:Value
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bool(self, _value: bool) -> Result<()> {$/;"	f
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bool(self, value: bool) -> Result<()> {$/;"	f
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bool(self, _v: bool) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bool(self, _value: bool) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bool(self, value: bool) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {$/;"	f
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_bytes(self, value: &[u8]) -> Result<()> {$/;"	f
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bytes(self, _value: &[u8]) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_bytes(self, value: &[u8]) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_char(self, value: char) -> Result<()> {$/;"	f
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_char(self, _v: char) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_char(self, value: char) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_char	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_char(self, value: char) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_element	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_element<T>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_element	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_element<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeVec
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f32(self, _value: f32) -> Result<()> {$/;"	f
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f32(self, value: f32) -> Result<()> {$/;"	f
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f32(self, _v: f32) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f32(self, _value: f32) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f32(self, value: f32) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f64(self, _value: f64) -> Result<()> {$/;"	f
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_f64(self, value: f64) -> Result<()> {$/;"	f
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f64(self, _v: f64) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f64(self, _value: f64) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_f64(self, value: f64) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_field	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>$/;"	f
serialize_field	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_field<T>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_field	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>$/;"	P	implementation:SerializeMap
serialize_field	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>$/;"	P	implementation:SerializeStructVariant
serialize_field	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeTupleVariant
serialize_field	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_field<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeVec
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i16(self, value: i16) -> Result<()> {$/;"	f
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i16(self, _v: i16) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i16(self, value: i16) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i16(self, value: i16) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i32(self, value: i32) -> Result<()> {$/;"	f
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i32(self, _v: i32) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i32(self, value: i32) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i32(self, value: i32) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i64(self, value: i64) -> Result<()> {$/;"	f
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i64(self, _v: i64) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i64(self, value: i64) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i64(self, value: i64) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_i8(self, value: i8) -> Result<()> {$/;"	f
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i8(self, _v: i8) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i8(self, value: i8) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_i8(self, value: i8) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_key<T>(&mut self, key: &T) -> Result<()>$/;"	f
serialize_key	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_key<T>(&mut self, key: &T) -> Result<()>$/;"	P	implementation:SerializeMap
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:NumberStrEmitter
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:RawValueStrEmitter
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	f
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	f
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:MapKeySerializer
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:NumberValueEmitter
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:RawValueEmitter
serialize_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {$/;"	P	implementation:Serializer
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<()>$/;"	P	implementation:NumberStrEmitter
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<()>$/;"	P	implementation:RawValueStrEmitter
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<()>$/;"	f
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<Value>$/;"	P	implementation:NumberValueEmitter
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, _value: &T) -> Result<Value>$/;"	P	implementation:RawValueEmitter
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<String>$/;"	P	implementation:MapKeySerializer
serialize_newtype_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<Value>$/;"	P	implementation:Serializer
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:NumberStrEmitter
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:RawValueStrEmitter
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	f
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:MapKeySerializer
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:NumberValueEmitter
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:RawValueEmitter
serialize_newtype_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_newtype_variant<T>($/;"	P	implementation:Serializer
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_none(self) -> Result<()> {$/;"	f
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_none(self) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_none(self) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_none(self) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_none(self) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:NumberStrEmitter
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:RawValueStrEmitter
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	f
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	f
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:MapKeySerializer
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:NumberValueEmitter
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:RawValueEmitter
serialize_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {$/;"	P	implementation:Serializer
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<()>$/;"	P	implementation:NumberStrEmitter
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<()>$/;"	P	implementation:RawValueStrEmitter
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<()>$/;"	f
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_some<T>(self, value: &T) -> Result<()>$/;"	f
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<String>$/;"	P	implementation:MapKeySerializer
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<Value>$/;"	P	implementation:NumberValueEmitter
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_some<T>(self, _value: &T) -> Result<Value>$/;"	P	implementation:RawValueEmitter
serialize_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_some<T>(self, value: &T) -> Result<Value>$/;"	P	implementation:Serializer
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<()> {$/;"	f
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_str(self, value: &str) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:NumberStrEmitter
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:RawValueStrEmitter
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	f
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct(self, name: &'static str, len: usize) -> Result<Self::SerializeStruct> {$/;"	f
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:MapKeySerializer
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:NumberValueEmitter
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct(self, _name: &'static str, _len: usize) -> Result<Self::SerializeStruct>/;"	P	implementation:RawValueEmitter
serialize_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct(self, name: &'static str, len: usize) -> Result<Self::SerializeStruct> {$/;"	P	implementation:Serializer
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:NumberStrEmitter
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:RawValueStrEmitter
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:MapKeySerializer
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:NumberValueEmitter
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:RawValueEmitter
serialize_struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_struct_variant($/;"	P	implementation:Serializer
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:NumberStrEmitter
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:RawValueStrEmitter
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	f
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple> {$/;"	f
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:MapKeySerializer
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:NumberValueEmitter
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:RawValueEmitter
serialize_tuple	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple> {$/;"	P	implementation:Serializer
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:NumberStrEmitter
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:RawValueStrEmitter
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:MapKeySerializer
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:NumberValueEmitter
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:RawValueEmitter
serialize_tuple_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:Serializer
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:NumberStrEmitter
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:RawValueStrEmitter
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:MapKeySerializer
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:NumberValueEmitter
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:RawValueEmitter
serialize_tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:Serializer
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u16(self, value: u16) -> Result<()> {$/;"	f
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u16(self, _v: u16) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u16(self, value: u16) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u16(self, value: u16) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u32(self, value: u32) -> Result<()> {$/;"	f
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u32(self, _v: u32) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u32(self, value: u32) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u32(self, value: u32) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u64(self, value: u64) -> Result<()> {$/;"	f
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u64(self, _v: u64) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u64(self, value: u64) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u64(self, value: u64) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_u8(self, value: u8) -> Result<()> {$/;"	f
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u8(self, _v: u8) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u8(self, value: u8) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_u8(self, value: u8) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit(self) -> Result<()> {$/;"	f
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit(self) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {$/;"	P	implementation:NumberStrEmitter
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {$/;"	P	implementation:RawValueStrEmitter
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {$/;"	f
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<String> {$/;"	P	implementation:MapKeySerializer
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {$/;"	P	implementation:NumberValueEmitter
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {$/;"	P	implementation:RawValueEmitter
serialize_unit_struct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {$/;"	P	implementation:Serializer
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:NumberStrEmitter
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:RawValueStrEmitter
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_unit_variant($/;"	f
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:MapKeySerializer
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:NumberValueEmitter
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:RawValueEmitter
serialize_unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_unit_variant($/;"	P	implementation:Serializer
serialize_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn serialize_value<T>(&mut self, value: &T) -> Result<()>$/;"	f
serialize_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    fn serialize_value<T>(&mut self, value: &T) -> Result<()>$/;"	P	implementation:SerializeMap
set	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    set: SparseSet,$/;"	m	struct:Threads
set_base_url	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn set_base_url(&mut self, base: Url) {$/;"	P	implementation:Client
set_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn set_body(&mut self, body: impl Into<Body>) {$/;"	P	implementation:Request
set_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn set_body(&mut self, body: impl Into<Body>) {$/;"	P	implementation:Response
set_content_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn set_content_type(&mut self, mime: Mime) {$/;"	P	implementation:Request
set_empty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn set_empty(&mut self) {$/;"	P	implementation:StateFlags
set_ext	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn set_ext<T: Send + Sync + 'static>(&mut self, val: T) -> Option<T> {$/;"	P	implementation:Request
set_failed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn set_failed(&mut self, _failed: &mut bool) {$/;"	P	implementation:SliceRead
set_failed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn set_failed(&mut self, failed: &mut bool) {$/;"	P	implementation:StrRead
set_failed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn set_failed(&mut self, failed: &mut bool) {$/;"	f
set_failed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    fn set_failed(&mut self, failed: &mut bool);$/;"	P	interface:Read
set_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn set_header(&mut self, key: impl Into<HeaderName>, value: impl ToHeaderValues) {$/;"	P	implementation:Request
set_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn set_match(&mut self) {$/;"	P	implementation:StateFlags
set_next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn set_next(&mut self, si: StatePtr, cls: usize, next: StatePtr) {$/;"	P	implementation:Transitions
set_non_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn set_non_match(self, at: usize) -> Result<T> {$/;"	P	implementation:Result
set_query	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn set_query(&mut self, query: &impl Serialize) -> crate::Result<()> {$/;"	P	implementation:Request
set_range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn set_range(&mut self, start: u8, end: u8) {$/;"	P	implementation:ByteClassSet
set_word	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn set_word(&mut self) {$/;"	P	implementation:StateFlags
set_word_boundary	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn set_word_boundary(&mut self) {$/;"	P	implementation:ByteClassSet
shift	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod shift;$/;"	n
shl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/shift.rs	/^pub(crate) fn shl(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
shortest_dfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn shortest_dfa(&self, text: &[u8], start: usize) -> dfa::Result<usize> {$/;"	P	implementation:ExecNoSync
shortest_dfa_reverse_suffix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn shortest_dfa_reverse_suffix($/;"	P	implementation:ExecNoSync
shortest_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn shortest_match(&self, text: &[u8]) -> Option<usize> {$/;"	P	implementation:Regex
shortest_match	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn shortest_match(&self, text: &str) -> Option<usize> {$/;"	P	implementation:Regex
shortest_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn shortest_match_at(&self, text: &[u8], start: usize) -> Option<usize> {$/;"	P	implementation:ExecNoSync
shortest_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn shortest_match_at(&self, text: &str, start: usize) -> Option<usize> {$/;"	P	implementation:ExecNoSyncStr
shortest_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn shortest_match_at($/;"	P	implementation:Regex
shortest_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn shortest_match_at($/;"	P	interface:RegularExpression
shortest_match_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn shortest_match_at($/;"	P	implementation:Regex
shortest_nfa	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn shortest_nfa(&self, text: &[u8], start: usize) -> Option<usize> {$/;"	P	implementation:ExecNoSync
shortest_nfa_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn shortest_nfa_type($/;"	P	implementation:ExecNoSync
should_exec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^pub fn should_exec(num_insts: usize, text_len: usize) -> bool {$/;"	f
should_suffix_scan	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn should_suffix_scan(&self) -> bool {$/;"	P	implementation:ExecReadOnly
show_state_ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn show_state_ptr(si: StatePtr) -> String {$/;"	f
shr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/shift.rs	/^pub(crate) fn shr(fp: &mut ExtendedFloat, shift: i32) {$/;"	f
single_precision	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    single_precision: bool,$/;"	m	struct:Deserializer
size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    size: usize,$/;"	m	struct:CacheInner
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CaptureNames
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:SplitN
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CaptureNames
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:SplitN
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:MapDeserializer
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:MapRefDeserializer
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:SeqDeserializer
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	implementation:SeqRefDeserializer
size_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    pub fn size_limit(mut self, size_limit: usize) -> Self {$/;"	P	implementation:Compiler
size_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    size_limit: usize,$/;"	m	struct:Compiler
size_limit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub size_limit: usize,$/;"	m	struct:RegexOptions
skip	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn skip(&self, mut pc: usize) -> usize {$/;"	P	implementation:Program
slice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/read.rs	/^    slice: &'a [u8],$/;"	m	struct:SliceRead
slot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub slot: usize,$/;"	m	struct:InstSave
slots	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    slots: &'s mut [Slot],$/;"	m	struct:Bounded
slots_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn slots_len(&self) -> usize {$/;"	P	implementation:ExecNoSync
slots_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn slots_len(&self) -> usize {$/;"	P	implementation:ExecNoSyncStr
slots_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    fn slots_len(&self) -> usize;$/;"	P	interface:RegularExpression
slots_per_thread	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    slots_per_thread: usize,$/;"	m	struct:Threads
small	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub small: ExtendedFloatArray,$/;"	m	struct:ModeratePathPowers
small	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^mod small {$/;"	n
small_atof	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/bhcomp.rs	/^fn small_atof<F>(mantissa: Bigint, exponent: i32, f: F) -> F$/;"	f
small_int	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub small_int: &'static [u64],$/;"	m	struct:ModeratePathPowers
small_powers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/mod.rs	/^mod small_powers;$/;"	n
source	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    fn source(&self) -> Option<&(dyn error::Error + 'static)> {$/;"	P	implementation:Error
sparse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    sparse: Box<[usize]>,$/;"	m	struct:SuffixCache
sparse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod sparse;$/;"	n
sparse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    sparse: Vec<bool>,$/;"	m	struct:SingleByteSet
sparse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/sparse.rs	/^    sparse: Box<[usize]>,$/;"	m	struct:SparseSet
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn split<'r, 't>(&'r self, text: &'t [u8]) -> Split<'r, 't> {$/;"	P	implementation:Regex
split	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn split<'r, 't>(&'r self, text: &'t str) -> Split<'r, 't> {$/;"	P	implementation:Regex
split_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^fn split_u64(x: u64) -> [Limb; 1] {$/;"	f
split_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^fn split_u64(x: u64) -> [Limb; 2] {$/;"	f
splitn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn splitn<'r, 't>($/;"	P	implementation:Regex
splitn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn splitn<'r, 't>($/;"	P	implementation:Regex
splits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    splits: Split<'r, 't>,$/;"	m	struct:SplitN
splits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    splits: Split<'r, 't>,$/;"	m	struct:SplitN
stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    stack: Vec<InstPtr>,$/;"	m	struct:CacheInner
stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    stack: &'r mut Vec<FollowEpsilon>,$/;"	m	struct:Fsm
stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    stack: Vec<FollowEpsilon>,$/;"	m	struct:Cache
stack	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    stack: Mutex<Vec<Box<T>>>,$/;"	m	struct:Pool
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    start: u8,$/;"	m	struct:SuffixCacheKey
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    start: StatePtr,$/;"	m	struct:Fsm
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    start: bool,$/;"	m	struct:EmptyFlags
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub start: InstPtr,$/;"	m	struct:Program
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub start: u8,$/;"	m	struct:InstBytes
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    pub fn start(&self) -> usize {$/;"	P	implementation:Match
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    start: usize,$/;"	m	struct:Match
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    pub fn start(&self) -> usize {$/;"	P	implementation:Match
start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    start: usize,$/;"	m	struct:Match
start_bound	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^                fn start_bound(&self) -> Bound<&Q> {$/;"	P	implementation:Map::remove_entry::Key
start_flags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn start_flags(&self, text: &[u8], at: usize) -> (EmptyFlags, StateFlags) {$/;"	P	implementation:Fsm
start_flags_reverse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn start_flags_reverse($/;"	P	implementation:Fsm
start_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    start_line: bool,$/;"	m	struct:EmptyFlags
start_of_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/iter.rs	/^    start_of_line: usize,$/;"	m	struct:LineColIterator
start_ptr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn start_ptr(&self, si: StatePtr) -> StatePtr {$/;"	P	implementation:Fsm
start_state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn start_state($/;"	P	implementation:Fsm
start_states	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    start_states: Vec<StatePtr>,$/;"	m	struct:CacheInner
starts_with_digit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^fn starts_with_digit(slice: &str) -> bool {$/;"	f
state	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn state(&self, si: StatePtr) -> &State {$/;"	P	implementation:Fsm
state_heap_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn state_heap_size(&self) -> usize {$/;"	P	implementation:Transitions
states	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    states: Vec<State>,$/;"	m	struct:StateMap
status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    status: u16,$/;"	m	struct:ResponsePairs
status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    status: u16,$/;"	m	struct:ResponsePairs
status	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn status(&self) -> StatusCode {$/;"	P	implementation:Response
step	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    fn step(&mut self, mut ip: InstPtr, mut at: InputAt) -> bool {$/;"	P	implementation:Bounded
step	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pikevm.rs	/^    fn step($/;"	P	implementation:Fsm
step	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/cached.rs	/^    pub step: i32,$/;"	m	struct:ModeratePathPowers
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'a> Replacer for &'a str {$/;"	c
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^impl<'t> From<Match<'t>> for &'t str {$/;"	c
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    impl Sealed for str {}$/;"	c	module:private
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl Index for str {$/;"	c
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^impl PartialEq<Value> for str {$/;"	c
str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/partial_eq.rs	/^impl<'a> PartialEq<Value> for &'a str {$/;"	c
struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn struct_variant<V>(self, _fields: &'static [&'static str], _visitor: V) -> Result<V::Value/;"	P	implementation:UnitVariantAccess
struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn struct_variant<V>(self, fields: &'static [&'static str], visitor: V) -> Result<V::Value>$/;"	P	implementation:VariantAccess
struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn struct_variant<V>($/;"	P	implementation:UnitOnly
struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn struct_variant<V>($/;"	P	implementation:VariantDeserializer
struct_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn struct_variant<V>($/;"	P	implementation:VariantRefDeserializer
style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    style: StyleStruct,$/;"	m	struct:CellStruct
style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod style;$/;"	n
style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    style: StyleStruct,$/;"	m	struct:TableStruct
sub	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^    pub fn sub(x: Limb, y: Limb) -> (Limb, bool) {$/;"	f	module:scalar
suffix_cache	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    suffix_cache: SuffixCache,$/;"	m	struct:Compiler
suffixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    suffixes: LiteralSearcher,$/;"	m	struct:ExecReadOnly
suffixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    suffixes: Literals,$/;"	m	struct:Parsed
suffixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn suffixes(lits: &Literals) -> Self {$/;"	P	implementation:Matcher
suffixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    fn suffixes(lits: &Literals) -> SingleByteSet {$/;"	P	implementation:SingleByteSet
suffixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/imp.rs	/^    pub fn suffixes(lits: Literals) -> Self {$/;"	P	implementation:LiteralSearcher
suffixes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/literal/mod.rs	/^        pub fn suffixes(_: Literals) -> Self {$/;"	P	implementation:imp::LiteralSearcher
swap_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn swap_body(&mut self, body: &mut Body) {$/;"	P	implementation:Response
swap_greed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub swap_greed: bool,$/;"	m	struct:RegexOptions
syntax	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/error.rs	/^    pub(crate) fn syntax(code: ErrorCode, line: usize, column: usize) -> Self {$/;"	P	implementation:Error
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod table;$/;"	n
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn table(self) -> TableStruct {$/;"	P	implementation:TableStruct
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn table(self) -> TableStruct {$/;"	f
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn table(self) -> TableStruct;$/;"	P	interface:Table
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    table: Vec<StatePtr>,$/;"	m	struct:Transitions
take	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^    pub fn take(&mut self) -> Value {$/;"	P	implementation:Value
take_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn take_body(&mut self) -> Body {$/;"	P	implementation:Request
take_body	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn take_body(&mut self) -> Body {$/;"	P	implementation:Response
take_middleware	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub(crate) fn take_middleware(&mut self) -> Option<Vec<Arc<dyn Middleware>>> {$/;"	P	implementation:Request
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^mod test {$/;"	n
test	/home/cht/Rust/spidder/src/main.rs	/^async fn test(input: String) -> surf::Result<Value> {$/;"	f
test_into_cell	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn test_into_cell() {$/;"	f	module:tests
test_into_row	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn test_into_row() {$/;"	f	module:tests
test_into_row_with_style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^    fn test_into_row_with_style() {$/;"	f	module:tests
test_row_from_str_arr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn test_row_from_str_arr() {$/;"	f	module:tests
test_size_of_inst	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    fn test_size_of_inst() {$/;"	f	module:test
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/row.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/expand.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/utf8.rs	/^mod tests {$/;"	n
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/input.rs	/^    text: &'t [u8],$/;"	m	struct:ByteInput
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    text: &'t [u8],$/;"	m	struct:Captures
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^    text: &'t [u8],$/;"	m	struct:Match
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    pub fn text(&self) -> &'t R::Text {$/;"	f
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_trait.rs	/^    text: &'t R::Text,$/;"	m	struct:Matches
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    text: &'t str,$/;"	m	struct:Captures
text	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_unicode.rs	/^    text: &'t str,$/;"	m	struct:Match
thread_owner_optimization	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    fn thread_owner_optimization() {$/;"	f	module:tests
tie_even	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/rounding.rs	/^pub(crate) fn tie_even(fp: &mut ExtendedFloat, is_above: bool, is_halfway: bool) {$/;"	f
title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/csv.rs	/^fn title(record: &StringRecord) -> RowStruct {$/;"	f
title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod title;$/;"	n
title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn title(mut self, title: Option<HorizontalLine>) -> Self {$/;"	P	implementation:SeparatorBuilder
title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn title<T: Row>(mut self, title: T) -> Self {$/;"	P	implementation:TableStruct
title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    title: Option<RowStruct>,$/;"	m	struct:TableStruct
title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/title.rs	/^    fn title() -> RowStruct;$/;"	P	interface:Title
to_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn to_bits(self) -> Self::Unsigned;$/;"	P	interface:Float
to_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn to_bits(self) -> u32 {$/;"	P	implementation:f32
to_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^    fn to_bits(self) -> u64 {$/;"	P	implementation:f64
to_digit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/digit.rs	/^pub(crate) fn to_digit(c: u8) -> Option<u32> {$/;"	f
to_owned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn to_owned(&self) -> Self::Owned {$/;"	P	implementation:RawValue
to_raw_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^pub fn to_raw_value<T>(value: &T) -> Result<Box<RawValue>, Error>$/;"	f
to_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub fn to_string<T>(value: &T) -> Result<String>$/;"	f	method:Formatter::write_char_escape
to_string_pretty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub fn to_string_pretty<T>(value: &T) -> Result<String>$/;"	f	method:Formatter::write_char_escape
to_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^pub fn to_value<T>(value: T) -> Result<Value, Error>$/;"	f
to_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub fn to_vec<T>(value: &T) -> Result<Vec<u8>>$/;"	f	method:Formatter::write_char_escape
to_vec_pretty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub fn to_vec_pretty<T>(value: &T) -> Result<Vec<u8>>$/;"	f	method:Formatter::write_char_escape
to_writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>$/;"	f	method:Formatter::write_char_escape
to_writer_pretty	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^pub fn to_writer_pretty<W, T>(writer: W, value: &T) -> Result<()>$/;"	f	method:Formatter::write_char_escape
top	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    pub fn top(mut self, top_padding: usize) -> Self {$/;"	P	implementation:PaddingBuilder
top	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    pub fn top(mut self, top: HorizontalLine) -> Self {$/;"	P	implementation:BorderBuilder
top_blank_lines	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn top_blank_lines($/;"	P	implementation:CellStruct
trace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn trace(&self, uri: impl AsRef<str>) -> RequestBuilder {$/;"	P	implementation:Client
trace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/one_off.rs	/^pub fn trace(uri: impl AsRef<str>) -> RequestBuilder {$/;"	f
trans	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    trans: Transitions,$/;"	m	struct:CacheInner
transpose	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/utils.rs	/^pub fn transpose<T>(v: Vec<Vec<T>>) -> Vec<Vec<T>> {$/;"	f
tri	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^macro_rules! tri {$/;"	M
try_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/csv.rs	/^    fn try_from(reader: &mut Reader<R>) -> Result<Self, Self::Error> {$/;"	P	implementation:TableStruct
tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value>$/;"	P	implementation:UnitVariantAccess
tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value>$/;"	P	implementation:VariantAccess
tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:UnitOnly
tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:VariantDeserializer
tuple_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Error>$/;"	P	implementation:VariantRefDeserializer
u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^impl Hi64<u32> for [u32] {$/;"	c
u32_to_usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^fn u32_to_usize(n: u32) -> usize {$/;"	f
u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/errors.rs	/^impl FloatErrors for u64 {$/;"	c
u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^impl Hi64<u64> for [u64] {$/;"	c
u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/num.rs	/^impl Mantissa for u64 {$/;"	c
u64_to_hi64_1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^fn u64_to_hi64_1(r0: u64) -> (u64, bool) {$/;"	f
u64_to_hi64_2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lexical/math.rs	/^fn u64_to_hi64_2(r0: u64, r1: u64) -> (u64, bool) {$/;"	f
u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_bytes.rs	/^impl<'a> Replacer for &'a [u8] {$/;"	c
u8_class	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    fn u8_class(&self, b: u8) -> usize {$/;"	P	implementation:Fsm
underline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/cell.rs	/^    fn underline(mut self, underline: bool) -> Self {$/;"	P	implementation:CellStruct
underline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn underline(mut self, underline: bool) -> Self {$/;"	P	implementation:StyleStruct
underline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/style.rs	/^    fn underline(self, underline: bool) -> Self;$/;"	P	interface:Style
underline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/table.rs	/^    fn underline(mut self, underline: bool) -> Self {$/;"	P	implementation:TableStruct
unexpected	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub(crate) fn unexpected(&self) -> Unexpected {$/;"	P	implementation:Number
unexpected	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn unexpected(&self) -> Unexpected {$/;"	P	implementation:Value
unicode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    pub fn unicode(mut self, yes: bool) -> Self {$/;"	P	implementation:ExecBuilder
unicode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/re_builder.rs	/^    pub unicode: bool,$/;"	m	struct:RegexOptions
unicode_lit_star_backtracking_utf8bytes_default_utf8bytes_mismatch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn unicode_lit_star_backtracking_utf8bytes_default_utf8bytes_mismatch() {$/;"	f	module:test
unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn unit_variant(self) -> Result<()> {$/;"	P	implementation:UnitVariantAccess
unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn unit_variant(self) -> Result<()> {$/;"	P	implementation:VariantAccess
unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn unit_variant(self) -> Result<(), Error> {$/;"	P	implementation:UnitOnly
unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn unit_variant(self) -> Result<(), Error> {$/;"	P	implementation:VariantDeserializer
unit_variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn unit_variant(self) -> Result<(), Error> {$/;"	P	implementation:VariantRefDeserializer
unwrap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    fn unwrap(self) -> Inst {$/;"	P	implementation:MaybeInst
uppercut_s_backtracking_bytes_default_bytes_mismatch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/exec.rs	/^    fn uppercut_s_backtracking_bytes_default_bytes_mismatch() {$/;"	f	module:test
uri	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    uri: &'a str,$/;"	m	struct:RequestPairs
uri	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    uri: &'a str,$/;"	m	struct:RequestPairs
url	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    fn url(&self, uri: impl AsRef<str>) -> Url {$/;"	P	implementation:Client
url	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request.rs	/^    pub fn url(&self) -> &Url {$/;"	P	implementation:Request
uses_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^    pub fn uses_bytes(&self) -> bool {$/;"	P	implementation:Program
usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^    impl Sealed for usize {}$/;"	c	module:private
usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/index.rs	/^impl Index for usize {$/;"	c
usize_to_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^fn usize_to_u32(n: usize) -> u32 {$/;"	f
usize_to_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn usize_to_u32(n: usize) -> u32 {$/;"	f
utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/lib.rs	/^mod utf8;$/;"	n
utf8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    fn utf8() {$/;"	f	module:decode_tests
utf8_seqs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/compile.rs	/^    utf8_seqs: Option<Utf8Sequences>,$/;"	m	struct:Compiler
utils	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/lib.rs	/^mod utils;$/;"	n
utils	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/lib.rs	/^pub mod utils;$/;"	n
vacant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    vacant: VacantEntryImpl<'a>,$/;"	m	struct:VacantEntry
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    pub fn value(&self) -> &T {$/;"	P	implementation:PoolGuard
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/pool.rs	/^    value: Option<Box<T>>,$/;"	m	struct:PoolGuard
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/lib.rs	/^pub mod value;$/;"	n
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^    pub value: Number,$/;"	m	struct:NumberFromString
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Cow<'de, str>,$/;"	m	struct:BorrowedCowStrDeserializer
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Option<&'de Value>,$/;"	m	struct:EnumRefDeserializer
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Option<&'de Value>,$/;"	m	struct:MapRefDeserializer
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Option<&'de Value>,$/;"	m	struct:VariantRefDeserializer
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Option<Value>,$/;"	m	struct:EnumDeserializer
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Option<Value>,$/;"	m	struct:MapDeserializer
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    value: Option<Value>,$/;"	m	struct:VariantDeserializer
values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn values(&self) -> Values {$/;"	P	implementation:Map
values_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn values_mut(&mut self) -> ValuesMut {$/;"	P	implementation:Map
variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    variant: &'de str,$/;"	m	struct:EnumRefDeserializer
variant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    variant: String,$/;"	m	struct:EnumDeserializer
variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self)>$/;"	P	implementation:UnitVariantAccess
variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self)>$/;"	P	implementation:VariantAccess
variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Error>$/;"	P	implementation:BorrowedCowStrDeserializer
variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Error>$/;"	P	implementation:EnumRefDeserializer
variant_seed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, VariantDeserializer), Error>$/;"	P	implementation:EnumDeserializer
vb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn vb(b: usize) -> String {$/;"	f
vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    vec: Vec<Value>,$/;"	m	struct:SerializeTupleVariant
vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/ser.rs	/^    vec: Vec<Value>,$/;"	m	struct:SerializeVec
version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/response.rs	/^    pub fn version(&self) -> Option<Version> {$/;"	P	implementation:Response
visible_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^        fn visible_byte(b: u8) -> String {$/;"	f	method:Program::fmt
visit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/de.rs	/^    fn visit<'de, V>(self, visitor: V) -> Result<V::Value>$/;"	P	implementation:ParserNumber
visit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    fn visit<'kvs>($/;"	P	implementation:RequestPairs
visit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/native.rs	/^    fn visit<'kvs>($/;"	P	implementation:ResponsePairs
visit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    fn visit<'kvs>($/;"	P	implementation:RequestPairs
visit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/middleware/logger/wasm.rs	/^    fn visit<'kvs>($/;"	P	implementation:ResponsePairs
visit_array	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^fn visit_array<'de, V>(array: Vec<Value>, visitor: V) -> Result<V::Value, Error>$/;"	f
visit_array_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^fn visit_array_ref<'de, V>(array: &'de [Value], visitor: V) -> Result<V::Value, Error>$/;"	f
visit_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_bool<E>(self, value: bool) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_borrowed_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn visit_borrowed_str<E>(self, s: &'de str) -> Result<Self::Value, E>$/;"	P	implementation:ReferenceFromString
visit_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn visit_f64<E>(self, value: f64) -> Result<Number, E>$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_f64<E>(self, value: f64) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn visit_i64<E>(self, value: i64) -> Result<Number, E> {$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_i64<E>(self, value: i64) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:Map::deserialize::Visitor
visit_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Number, V::Error>$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:Box::deserialize::BoxedVisitor
visit_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:RawValue::deserialize::ReferenceVisitor
visit_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_map<V>(self, mut visitor: V) -> Result<Value, V::Error>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_none	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_none<E>(self) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_object	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^fn visit_object<'de, V>(object: Map<String, Value>, visitor: V) -> Result<V::Value, Error>$/;"	f
visit_object_ref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^fn visit_object_ref<'de, V>(object: &'de Map<String, Value>, visitor: V) -> Result<V::Value, Err/;"	f
visit_seq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_seq<V>(self, mut visitor: V) -> Result<Value, V::Error>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_some	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_some<D>(self, deserializer: D) -> Result<Value, D::Error>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn visit_str<E>(self, s: &str) -> Result<(), E>$/;"	P	implementation:NumberKey::deserialize::FieldVisitor
visit_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn visit_str<E>(self, s: &str) -> Result<NumberFromString, E>$/;"	P	implementation:NumberFromString::deserialize::Visitor
visit_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^            fn visit_str<E>(self, s: &str) -> Result<(), E>$/;"	P	implementation:RawKey::deserialize::FieldVisitor
visit_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:BoxedFromString
visit_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_str<E>(self, value: &str) -> Result<Value, E>$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:KeyClassifier
visit_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/raw.rs	/^    fn visit_string<E>(self, s: String) -> Result<Self::Value, E>$/;"	P	implementation:BoxedFromString
visit_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_string<E>(self, value: String) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^    fn visit_string<E>(self, s: String) -> Result<Self::Value, E>$/;"	P	implementation:KeyClassifier
visit_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/number.rs	/^            fn visit_u64<E>(self, value: u64) -> Result<Number, E> {$/;"	P	implementation:Number::deserialize::NumberVisitor
visit_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_u64<E>(self, value: u64) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visit_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^            fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:Map::deserialize::Visitor
visit_unit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/de.rs	/^            fn visit_unit<E>(self) -> Result<Value, E> {$/;"	P	implementation:Value::deserialize::ValueVisitor
visited	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/backtrack.rs	/^    visited: Vec<Bits>,$/;"	m	struct:Cache
with	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn with(mut self, middleware: impl Middleware) -> Self {$/;"	P	implementation:Client
with_capacity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/map.rs	/^    pub fn with_capacity(capacity: usize) -> Self {$/;"	P	implementation:Map
with_client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/request_builder.rs	/^    pub(crate) fn with_client(mut self, client: Client) -> Self {$/;"	P	implementation:RequestBuilder
with_formatter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    pub fn with_formatter(writer: W, formatter: F) -> Self {$/;"	f
with_goto	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/prog.rs	/^        fn with_goto(cur: usize, goto: usize, fmtd: String) -> String {$/;"	f	method:Program::fmt
with_http_client	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    pub fn with_http_client<C: HttpClient>(http_client: C) -> Self {$/;"	P	implementation:Client
with_http_client_internal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/surf-2.2.0/src/client.rs	/^    fn with_http_client_internal(http_client: Arc<dyn HttpClient>) -> Self {$/;"	P	implementation:Client
with_title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/title.rs	/^    fn with_title(self) -> TableStruct {$/;"	f
with_title	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/cli-table-0.4.6/src/title.rs	/^    fn with_title(self) -> TableStruct;$/;"	P	interface:WithTitle
word_boundary	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^    word_boundary: bool,$/;"	m	struct:EmptyFlags
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize> {$/;"	P	implementation:Vec
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize> {$/;"	P	implementation:W
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize>;$/;"	P	interface:Write
write	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/value/mod.rs	/^            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Value::fmt::WriterFormatter
write_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn write_all(&mut self, buf: &[u8]) -> Result<()> {$/;"	P	implementation:Vec
write_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn write_all(&mut self, buf: &[u8]) -> Result<()> {$/;"	P	implementation:W
write_all	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/io/core.rs	/^    fn write_all(&mut self, buf: &[u8]) -> Result<()> {$/;"	P	interface:Write
write_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>$/;"	P	interface:Formatter
write_char_escape	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()/;"	P	interface:Formatter
write_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_f32<W>(&mut self, writer: &mut W, value: f32) -> io::Result<()>$/;"	P	interface:Formatter
write_f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>$/;"	P	interface:Formatter
write_i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_i16<W>(&mut self, writer: &mut W, value: i16) -> io::Result<()>$/;"	P	interface:Formatter
write_i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_i32<W>(&mut self, writer: &mut W, value: i32) -> io::Result<()>$/;"	P	interface:Formatter
write_i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>$/;"	P	interface:Formatter
write_i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_i8<W>(&mut self, writer: &mut W, value: i8) -> io::Result<()>$/;"	P	interface:Formatter
write_null	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>$/;"	P	interface:Formatter
write_number_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_number_str<W>(&mut self, writer: &mut W, value: &str) -> io::Result<()>$/;"	P	interface:Formatter
write_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^            fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	f	function:collect_str
write_string_fragment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>$/;"	P	interface:Formatter
write_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_u16<W>(&mut self, writer: &mut W, value: u16) -> io::Result<()>$/;"	P	interface:Formatter
write_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_u32<W>(&mut self, writer: &mut W, value: u32) -> io::Result<()>$/;"	P	interface:Formatter
write_u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>$/;"	P	interface:Formatter
write_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    fn write_u8<W>(&mut self, writer: &mut W, value: u8) -> io::Result<()>$/;"	P	interface:Formatter
write_vari32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn write_vari32(data: &mut Vec<u8>, n: i32) {$/;"	f
write_varu32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.5.4/src/dfa.rs	/^fn write_varu32(data: &mut Vec<u8>, mut n: u32) {$/;"	f
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^            writer: &'ser mut W,$/;"	m	struct:collect_str::Adapter
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.64/src/ser.rs	/^    writer: W,$/;"	m	struct:Serializer
